
TERM_PRJCT_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b0  080078b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b8  080078b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080078c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000074  08007934  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007934  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c88  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003499  00000000  00000000  00037d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000065e4  00000000  00000000  0003d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b14  00000000  00000000  000438dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955e0  00000000  00000000  0005b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f09d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  000f0a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007718 	.word	0x08007718

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007718 	.word	0x08007718

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef>:
#include "stm32f4xx_hal.h"
#include "controller_driver.h"
#include "servo_driver.h"
#include "encoder_driver.h"

movement_task::movement_task(motor_driver _Left_Mot,
 8000584:	b084      	sub	sp, #16
 8000586:	b5b0      	push	{r4, r5, r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	f107 001c 	add.w	r0, r7, #28
 8000592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				right_duty(0),
				left_duty(0),
				huart(_huart),
				start_ticks(0),
				curr_time(0),
				start_count(0)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2205      	movs	r2, #5
 80005a6:	609a      	str	r2, [r3, #8]
						(movement_task::state_fcn) &movement_task::state_4}),
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f005 fea9 	bl	8006300 <_Znaj>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4619      	mov	r1, r3
 80005b2:	460b      	mov	r3, r1
 80005b4:	4a3a      	ldr	r2, [pc, #232]	; (80006a0 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x11c>)
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	3308      	adds	r3, #8
 80005be:	4a39      	ldr	r2, [pc, #228]	; (80006a4 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x120>)
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	3308      	adds	r3, #8
 80005c8:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x124>)
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	3308      	adds	r3, #8
 80005d2:	4a36      	ldr	r2, [pc, #216]	; (80006ac <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x128>)
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	3308      	adds	r3, #8
 80005dc:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x12c>)
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
				start_count(0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60d9      	str	r1, [r3, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 0410 	add.w	r4, r3, #16
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f103 0420 	add.w	r4, r3, #32
 80005fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800060e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800061e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800062e:	f107 055c 	add.w	r5, r7, #92	; 0x5c
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	682b      	ldr	r3, [r5, #0]
 8000638:	6023      	str	r3, [r4, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000640:	f107 0570 	add.w	r5, r7, #112	; 0x70
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	6023      	str	r3, [r4, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000652:	679a      	str	r2, [r3, #120]	; 0x78
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	67da      	str	r2, [r3, #124]	; 0x7c
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
{
	printf("Initialized?");
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef+0x130>)
 800068c:	f005 ff76 	bl	800657c <iprintf>
}
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800069c:	b004      	add	sp, #16
 800069e:	4770      	bx	lr
 80006a0:	08000755 	.word	0x08000755
 80006a4:	0800079d 	.word	0x0800079d
 80006a8:	080009e9 	.word	0x080009e9
 80006ac:	08000c35 	.word	0x08000c35
 80006b0:	08000cfd 	.word	0x08000cfd
 80006b4:	08007730 	.word	0x08007730

080006b8 <_ZN13movement_task3runEv>:

void movement_task::run(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (state>=0 && state<num_states)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d239      	bcs.n	8000740 <_ZN13movement_task3runEv+0x88>
	{
		(this->*state_list[state])();
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68da      	ldr	r2, [r3, #12]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	105b      	asrs	r3, r3, #1
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1898      	adds	r0, r3, r2
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	68da      	ldr	r2, [r3, #12]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	4413      	add	r3, r2
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d015      	beq.n	8000724 <_ZN13movement_task3runEv+0x6c>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	105b      	asrs	r3, r3, #1
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	68d1      	ldr	r1, [r2, #12]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	00d2      	lsls	r2, r2, #3
 800071a:	440a      	add	r2, r1
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	4413      	add	r3, r2
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	e006      	b.n	8000732 <_ZN13movement_task3runEv+0x7a>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68da      	ldr	r2, [r3, #12]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4798      	blx	r3

		runs++;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
	else
	{
		printf("Error Invalid State");
		while(1){}
	}
}
 800073e:	e003      	b.n	8000748 <_ZN13movement_task3runEv+0x90>
		printf("Error Invalid State");
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN13movement_task3runEv+0x98>)
 8000742:	f005 ff1b 	bl	800657c <iprintf>
		while(1){}
 8000746:	e7fe      	b.n	8000746 <_ZN13movement_task3runEv+0x8e>
}
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	08007740 	.word	0x08007740

08000754 <_ZN13movement_task7state_0Ev>:

void movement_task::state_0(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	// Initialization state
	// Maybe Calibrate IMU Here
	// Zero Everything
	Right_Encoder.zero_count();
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3340      	adds	r3, #64	; 0x40
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fb9d 	bl	8000ea0 <_ZN14encoder_reader10zero_countEv>
	Left_Encoder.zero_count();
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3330      	adds	r3, #48	; 0x30
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fb98 	bl	8000ea0 <_ZN14encoder_reader10zero_countEv>
	right_sp = 0;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	67da      	str	r2, [r3, #124]	; 0x7c
	left_sp = 0;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	right_duty = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	left_duty = 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	state = 1;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <_ZN13movement_task7state_1Ev>:

void movement_task::state_1(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a2      	sub	sp, #136	; 0x88
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	// Move out of Home Area
	right_sp = 650;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f240 228a 	movw	r2, #650	; 0x28a
 80007aa:	67da      	str	r2, [r3, #124]	; 0x7c
	left_sp = right_sp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Left_Feedback.set_setpoint(left_sp);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007c2:	4619      	mov	r1, r3
 80007c4:	4610      	mov	r0, r2
 80007c6:	f000 fae6 	bl	8000d96 <_ZN19feedback_controller12set_setpointEl>
	Right_Feedback.set_setpoint(right_sp);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4610      	mov	r0, r2
 80007d8:	f000 fadd 	bl	8000d96 <_ZN19feedback_controller12set_setpointEl>



	char buffer[50] = {0};
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e4:	222e      	movs	r2, #46	; 0x2e
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 fddf 	bl	80063ac <memset>
	int32_t right_count = Right_Encoder.get_count();
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3340      	adds	r3, #64	; 0x40
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fb67 	bl	8000ec6 <_ZN14encoder_reader9get_countEv>
 80007f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	int32_t left_count = Left_Encoder.get_count();
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3330      	adds	r3, #48	; 0x30
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fb60 	bl	8000ec6 <_ZN14encoder_reader9get_countEv>
 8000806:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	int32_t n3 = sprintf(buffer, "Right Count: %d  ",right_count);
 800080a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000812:	496f      	ldr	r1, [pc, #444]	; (80009d0 <_ZN13movement_task7state_1Ev+0x234>)
 8000814:	4618      	mov	r0, r3
 8000816:	f005 ff1d 	bl	8006654 <siprintf>
 800081a:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n3, 1000);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000822:	b29a      	uxth	r2, r3
 8000824:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	f004 fd33 	bl	8005296 <HAL_UART_Transmit>
	int32_t n2 = sprintf(buffer, "Left Count: %d \r\n",left_count);
 8000830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000834:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000838:	4966      	ldr	r1, [pc, #408]	; (80009d4 <_ZN13movement_task7state_1Ev+0x238>)
 800083a:	4618      	mov	r0, r3
 800083c:	f005 ff0a 	bl	8006654 <siprintf>
 8000840:	67b8      	str	r0, [r7, #120]	; 0x78
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n2, 1000);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000848:	b29a      	uxth	r2, r3
 800084a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	f004 fd20 	bl	8005296 <HAL_UART_Transmit>



	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000856:	2101      	movs	r1, #1
 8000858:	485f      	ldr	r0, [pc, #380]	; (80009d8 <_ZN13movement_task7state_1Ev+0x23c>)
 800085a:	f002 fab7 	bl	8002dcc <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf0c      	ite	eq
 8000864:	2301      	moveq	r3, #1
 8000866:	2300      	movne	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d072      	beq.n	8000954 <_ZN13movement_task7state_1Ev+0x1b8>
	{
		if (start_count == 0)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8000874:	2b00      	cmp	r3, #0
 8000876:	d109      	bne.n	800088c <_ZN13movement_task7state_1Ev+0xf0>
		{
			start_ticks = HAL_GetTick();
 8000878:	f001 ff50 	bl	800271c <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			start_count = 1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		}
		curr_time = HAL_GetTick() - start_ticks;
 800088c:	f001 ff46 	bl	800271c <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

		int32_t n1 = sprintf(buffer, "BUTTON PRESSED  \r\n");
 80008a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a4:	494d      	ldr	r1, [pc, #308]	; (80009dc <_ZN13movement_task7state_1Ev+0x240>)
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 fed4 	bl	8006654 <siprintf>
 80008ac:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80008b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	f004 fcea 	bl	8005296 <HAL_UART_Transmit>



		right_duty = Right_Feedback.run(right_count);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3364      	adds	r3, #100	; 0x64
 80008c6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa80 	bl	8000dd0 <_ZN19feedback_controller3runEl>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = Left_Feedback.run(left_count);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3350      	adds	r3, #80	; 0x50
 80008de:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fa74 	bl	8000dd0 <_ZN19feedback_controller3runEl>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		if (right_duty > 2500){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80008f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008fc:	4293      	cmp	r3, r2
 80008fe:	dd05      	ble.n	800090c <_ZN13movement_task7state_1Ev+0x170>
			right_duty = 2500;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000906:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800090a:	e00a      	b.n	8000922 <_ZN13movement_task7state_1Ev+0x186>
		}
		else if (right_duty < -2500){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000912:	4a33      	ldr	r2, [pc, #204]	; (80009e0 <_ZN13movement_task7state_1Ev+0x244>)
 8000914:	4293      	cmp	r3, r2
 8000916:	da04      	bge.n	8000922 <_ZN13movement_task7state_1Ev+0x186>
			right_duty = -2500;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f24f 623c 	movw	r2, #63036	; 0xf63c
 800091e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		}

		if (left_duty > 2500){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000928:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800092c:	4293      	cmp	r3, r2
 800092e:	dd05      	ble.n	800093c <_ZN13movement_task7state_1Ev+0x1a0>
			left_duty = 2500;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000936:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800093a:	e023      	b.n	8000984 <_ZN13movement_task7state_1Ev+0x1e8>
		}
		else if (left_duty < -2500){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000942:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <_ZN13movement_task7state_1Ev+0x244>)
 8000944:	4293      	cmp	r3, r2
 8000946:	da1d      	bge.n	8000984 <_ZN13movement_task7state_1Ev+0x1e8>
			left_duty = -2500;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f24f 623c 	movw	r2, #63036	; 0xf63c
 800094e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000952:	e017      	b.n	8000984 <_ZN13movement_task7state_1Ev+0x1e8>



	} else
	{
		char buffer[50] = {0};
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	222e      	movs	r2, #46	; 0x2e
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f005 fd23 	bl	80063ac <memset>
		int32_t n1 = sprintf(buffer, "BUTTON Not PRESSED  \r\n");
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	491e      	ldr	r1, [pc, #120]	; (80009e4 <_ZN13movement_task7state_1Ev+0x248>)
 800096c:	4618      	mov	r0, r3
 800096e:	f005 fe71 	bl	8006654 <siprintf>
 8000972:	6778      	str	r0, [r7, #116]	; 0x74
		//HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
		right_duty = 0;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = 0;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	}
	Right_Mot.Set_PWM(right_duty);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f103 0220 	add.w	r2, r3, #32
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000990:	4619      	mov	r1, r3
 8000992:	4610      	mov	r0, r2
 8000994:	f000 ff8e 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(left_duty);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f103 0210 	add.w	r2, r3, #16
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 80009a4:	4619      	mov	r1, r3
 80009a6:	4610      	mov	r0, r2
 80009a8:	f000 ff84 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>



	if (curr_time > 5000)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d906      	bls.n	80009c8 <_ZN13movement_task7state_1Ev+0x22c>
	{
		state = 2;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2202      	movs	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
		start_count = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	}

}
 80009c8:	bf00      	nop
 80009ca:	3788      	adds	r7, #136	; 0x88
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	08007754 	.word	0x08007754
 80009d4:	08007768 	.word	0x08007768
 80009d8:	40020400 	.word	0x40020400
 80009dc:	0800777c 	.word	0x0800777c
 80009e0:	fffff63c 	.word	0xfffff63c
 80009e4:	08007790 	.word	0x08007790

080009e8 <_ZN13movement_task7state_2Ev>:

void movement_task::state_2(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0a2      	sub	sp, #136	; 0x88
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	// Move out of Home Area
	right_sp = 896;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f44f 7260 	mov.w	r2, #896	; 0x380
 80009f6:	67da      	str	r2, [r3, #124]	; 0x7c
	left_sp = 395;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f240 128b 	movw	r2, #395	; 0x18b
 80009fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Left_Feedback.set_setpoint(left_sp);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4610      	mov	r0, r2
 8000a12:	f000 f9c0 	bl	8000d96 <_ZN19feedback_controller12set_setpointEl>
	Right_Feedback.set_setpoint(right_sp);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4610      	mov	r0, r2
 8000a24:	f000 f9b7 	bl	8000d96 <_ZN19feedback_controller12set_setpointEl>



	char buffer[50] = {0};
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a30:	222e      	movs	r2, #46	; 0x2e
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 fcb9 	bl	80063ac <memset>
	int32_t right_count = Right_Encoder.get_count();
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3340      	adds	r3, #64	; 0x40
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fa41 	bl	8000ec6 <_ZN14encoder_reader9get_countEv>
 8000a44:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	int32_t left_count = Left_Encoder.get_count();
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3330      	adds	r3, #48	; 0x30
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fa3a 	bl	8000ec6 <_ZN14encoder_reader9get_countEv>
 8000a52:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	int32_t n3 = sprintf(buffer, "Right Count: %d  ",right_count);
 8000a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000a5e:	496f      	ldr	r1, [pc, #444]	; (8000c1c <_ZN13movement_task7state_2Ev+0x234>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 fdf7 	bl	8006654 <siprintf>
 8000a66:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n3, 1000);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	f004 fc0d 	bl	8005296 <HAL_UART_Transmit>
	int32_t n2 = sprintf(buffer, "Left Count: %d \r\n",left_count);
 8000a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a84:	4966      	ldr	r1, [pc, #408]	; (8000c20 <_ZN13movement_task7state_2Ev+0x238>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fde4 	bl	8006654 <siprintf>
 8000a8c:	67b8      	str	r0, [r7, #120]	; 0x78
	HAL_UART_Transmit(huart,(uint8_t*) buffer, n2, 1000);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	f004 fbfa 	bl	8005296 <HAL_UART_Transmit>



	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	485f      	ldr	r0, [pc, #380]	; (8000c24 <_ZN13movement_task7state_2Ev+0x23c>)
 8000aa6:	f002 f991 	bl	8002dcc <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d072      	beq.n	8000ba0 <_ZN13movement_task7state_2Ev+0x1b8>
	{
		if (start_count == 0)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d109      	bne.n	8000ad8 <_ZN13movement_task7state_2Ev+0xf0>
		{
			start_ticks = HAL_GetTick();
 8000ac4:	f001 fe2a 	bl	800271c <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			start_count = 1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		}
		curr_time = HAL_GetTick() - start_ticks;
 8000ad8:	f001 fe20 	bl	800271c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae4:	1ad2      	subs	r2, r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

		int32_t n1 = sprintf(buffer, "BUTTON PRESSED  \r\n");
 8000aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000af0:	494d      	ldr	r1, [pc, #308]	; (8000c28 <_ZN13movement_task7state_2Ev+0x240>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f005 fdae 	bl	8006654 <siprintf>
 8000af8:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	f004 fbc4 	bl	8005296 <HAL_UART_Transmit>



		right_duty = Right_Feedback.run(right_count);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3364      	adds	r3, #100	; 0x64
 8000b12:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f95a 	bl	8000dd0 <_ZN19feedback_controller3runEl>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = Left_Feedback.run(left_count);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3350      	adds	r3, #80	; 0x50
 8000b2a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f94e 	bl	8000dd0 <_ZN19feedback_controller3runEl>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		if (right_duty > 2500){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000b44:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	dd05      	ble.n	8000b58 <_ZN13movement_task7state_2Ev+0x170>
			right_duty = 2500;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000b52:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8000b56:	e00a      	b.n	8000b6e <_ZN13movement_task7state_2Ev+0x186>
		}
		else if (right_duty < -2500){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000b5e:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <_ZN13movement_task7state_2Ev+0x244>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	da04      	bge.n	8000b6e <_ZN13movement_task7state_2Ev+0x186>
			right_duty = -2500;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f24f 623c 	movw	r2, #63036	; 0xf63c
 8000b6a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		}

		if (left_duty > 2500){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000b74:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	dd05      	ble.n	8000b88 <_ZN13movement_task7state_2Ev+0x1a0>
			left_duty = 2500;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000b82:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000b86:	e023      	b.n	8000bd0 <_ZN13movement_task7state_2Ev+0x1e8>
		}
		else if (left_duty < -2500){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000b8e:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <_ZN13movement_task7state_2Ev+0x244>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	da1d      	bge.n	8000bd0 <_ZN13movement_task7state_2Ev+0x1e8>
			left_duty = -2500;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f24f 623c 	movw	r2, #63036	; 0xf63c
 8000b9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000b9e:	e017      	b.n	8000bd0 <_ZN13movement_task7state_2Ev+0x1e8>



	} else
	{
		char buffer[50] = {0};
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	222e      	movs	r2, #46	; 0x2e
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f005 fbfd 	bl	80063ac <memset>
		int32_t n1 = sprintf(buffer, "BUTTON Not PRESSED  \r\n");
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	491e      	ldr	r1, [pc, #120]	; (8000c30 <_ZN13movement_task7state_2Ev+0x248>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f005 fd4b 	bl	8006654 <siprintf>
 8000bbe:	6778      	str	r0, [r7, #116]	; 0x74
		//HAL_UART_Transmit(huart,(uint8_t*) buffer, n1, 1000);
		right_duty = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = 0;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	}
	Right_Mot.Set_PWM(right_duty);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f103 0220 	add.w	r2, r3, #32
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4610      	mov	r0, r2
 8000be0:	f000 fe68 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(left_duty);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f103 0210 	add.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4610      	mov	r0, r2
 8000bf4:	f000 fe5e 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>



	if (curr_time > 5000)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d906      	bls.n	8000c14 <_ZN13movement_task7state_2Ev+0x22c>
	{
		state = 3;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	601a      	str	r2, [r3, #0]
		start_count = 0;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	}

}
 8000c14:	bf00      	nop
 8000c16:	3788      	adds	r7, #136	; 0x88
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08007754 	.word	0x08007754
 8000c20:	08007768 	.word	0x08007768
 8000c24:	40020400 	.word	0x40020400
 8000c28:	0800777c 	.word	0x0800777c
 8000c2c:	fffff63c 	.word	0xfffff63c
 8000c30:	08007790 	.word	0x08007790

08000c34 <_ZN13movement_task7state_3Ev>:

void movement_task::state_3(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	// Drive In Circle


	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	482e      	ldr	r0, [pc, #184]	; (8000cf8 <_ZN13movement_task7state_3Ev+0xc4>)
 8000c40:	f002 f8c4 	bl	8002dcc <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <_ZN13movement_task7state_3Ev+0x68>
	{
		if (start_count == 0)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d109      	bne.n	8000c72 <_ZN13movement_task7state_3Ev+0x3e>
		{
			start_ticks = HAL_GetTick();
 8000c5e:	f001 fd5d 	bl	800271c <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			start_count = 1;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		}
		curr_time = HAL_GetTick() - start_ticks;
 8000c72:	f001 fd53 	bl	800271c <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	1ad2      	subs	r2, r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		right_duty = 1250;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000c8c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty  = 2500;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c96:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8000c9a:	e007      	b.n	8000cac <_ZN13movement_task7state_3Ev+0x78>

	} else
	{
		right_duty = 0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		left_duty = 0;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	}

	Right_Mot.Set_PWM(right_duty);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f103 0220 	add.w	r2, r3, #32
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4610      	mov	r0, r2
 8000cbc:	f000 fdfa 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(left_duty);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f103 0210 	add.w	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4610      	mov	r0, r2
 8000cd0:	f000 fdf0 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>

	if (curr_time > 20000)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cda:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d906      	bls.n	8000cf0 <_ZN13movement_task7state_3Ev+0xbc>
	{
		state = 4;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	601a      	str	r2, [r3, #0]
		start_count = 0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40020400 	.word	0x40020400

08000cfc <_ZN13movement_task7state_4Ev>:

void movement_task::state_4(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b090      	sub	sp, #64	; 0x40
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	// Return Home
	Right_Mot.Set_PWM(0);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3320      	adds	r3, #32
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fdd2 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>
	Left_Mot.Set_PWM(0);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3310      	adds	r3, #16
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fdcc 	bl	80018b4 <_ZN12motor_driver7Set_PWMEs>
	char buffer[50] = {0};
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	222e      	movs	r2, #46	; 0x2e
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fb3f 	bl	80063ac <memset>
	int32_t s4 = sprintf(buffer, "State 4\r\n");
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4909      	ldr	r1, [pc, #36]	; (8000d58 <_ZN13movement_task7state_4Ev+0x5c>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 fc8d 	bl	8006654 <siprintf>
 8000d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, s4, 1000);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f107 0108 	add.w	r1, r7, #8
 8000d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4c:	f004 faa3 	bl	8005296 <HAL_UART_Transmit>
}
 8000d50:	bf00      	nop
 8000d52:	3740      	adds	r7, #64	; 0x40
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	080077a8 	.word	0x080077a8

08000d5c <_ZN19feedback_controllerC1Ev>:
#include "main.h"
#include "stm32f4xx_hal.h"
#include "controller_driver.h"

// Implementation of the feedback controller class
feedback_controller::feedback_controller(void)
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
{
	// Initialize all gains, error and setpoints to zero
	KP = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	801a      	strh	r2, [r3, #0]
	KI = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	805a      	strh	r2, [r3, #2]
	DUTY_CYCLE = 0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	809a      	strh	r2, [r3, #4]
	SET_POINT = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
	CURR_CNT = 0;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
	INT_ERR = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	821a      	strh	r2, [r3, #16]
}
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_ZN19feedback_controller12set_setpointEl>:

// Implementation of method to set the setpoint of feedback controller
void feedback_controller::set_setpoint(int32_t _SET_POINT)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
	SET_POINT = _SET_POINT;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	609a      	str	r2, [r3, #8]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_ZN19feedback_controller6set_KPEs>:

// Implementation of method to set the porportional gain
void feedback_controller::set_KP(int16_t _KP)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	807b      	strh	r3, [r7, #2]
	KP = _KP;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	801a      	strh	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_ZN19feedback_controller3runEl>:
	INT_ERR = 0;	// zero the integral error when setting KI
}

// Implementation of the method to run porportional - integral control based on curent encoder position
int16_t feedback_controller::run(int32_t _CURR_CNT)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	CURR_CNT = _CURR_CNT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	60da      	str	r2, [r3, #12]
	INT_ERR += (SET_POINT - CURR_CNT);			// add the current error to the integrated error
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	b299      	uxth	r1, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	821a      	strh	r2, [r3, #16]

	DUTY_CYCLE = KP*(SET_POINT - CURR_CNT) + KI*INT_ERR/100;	// Determine duty cycle from KP and KI
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6899      	ldr	r1, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	fb12 f303 	smulbb	r3, r2, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e22:	4619      	mov	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000e2a:	fb01 f303 	mul.w	r3, r1, r3
 8000e2e:	490a      	ldr	r1, [pc, #40]	; (8000e58 <_ZN19feedback_controller3runEl+0x88>)
 8000e30:	fb81 0103 	smull	r0, r1, r1, r3
 8000e34:	1149      	asrs	r1, r1, #5
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	1acb      	subs	r3, r1, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	809a      	strh	r2, [r3, #4]
	return DUTY_CYCLE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	51eb851f 	.word	0x51eb851f

08000e5c <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>:
{

}

// Implementation of initializing constructor
encoder_reader::encoder_reader(TIM_HandleTypeDef* _htim)
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
    		:htim(_htim)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	60da      	str	r2, [r3, #12]

{
	htim = _htim;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(htim,TIM_CHANNEL_ALL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	213c      	movs	r1, #60	; 0x3c
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fd7d 	bl	8004978 <HAL_TIM_Encoder_Start>

	// Initialize delta and count to zero
	COUNT = 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	DELTA = 0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim); // Initialize the previous value to current timer count
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	605a      	str	r2, [r3, #4]
}
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_ZN14encoder_reader10zero_countEv>:

// Implementation of method to zero the current encoder position
void encoder_reader::zero_count(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	COUNT = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	605a      	str	r2, [r3, #4]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN14encoder_reader9get_countEv>:


// Implementation of method to get the current encoder position and store in the object
int32_t encoder_reader::get_count(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	DELTA 		= 	__HAL_TIM_GET_COUNTER(htim) - prev_value;	// calculate the change in encoder position
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
	prev_value 	= 	__HAL_TIM_GET_COUNTER(htim);			// store current value for next encoder read callback
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	605a      	str	r2, [r3, #4]


	if (DELTA > 32768){		// overflow condition
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ef6:	dd06      	ble.n	8000f06 <_ZN14encoder_reader9get_countEv+0x40>
		DELTA -= 65536;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	e00a      	b.n	8000f1c <_ZN14encoder_reader9get_countEv+0x56>
	}

	else if (DELTA < -32768){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f0e:	da05      	bge.n	8000f1c <_ZN14encoder_reader9get_countEv+0x56>
		DELTA += 65536;		// under flow condition
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
	}

	COUNT += DELTA;			// increment counter delta
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	441a      	add	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]

	return COUNT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b0f9      	sub	sp, #484	; 0x1e4
 8000f40:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f001 fb85 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f8e1 	bl	800110c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 fc17 	bl	800177c <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000f4e:	f000 fa2b 	bl	80013a8 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8000f52:	f000 fbe5 	bl	8001720 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8000f56:	f000 fabf 	bl	80014d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000f5a:	f000 fb1b 	bl	8001594 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 8000f5e:	f000 f97b 	bl	8001258 <_ZL12MX_TIM1_Initv>
  MX_TIM5_Init();
 8000f62:	f000 fb75 	bl	8001650 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8000f66:	f000 f943 	bl	80011f0 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &char_buffer, 1);	// Initialize UART Receive
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	495e      	ldr	r1, [pc, #376]	; (80010e8 <main+0x1ac>)
 8000f6e:	485f      	ldr	r0, [pc, #380]	; (80010ec <main+0x1b0>)
 8000f70:	f004 fa23 	bl	80053ba <HAL_UART_Receive_IT>
           encoder_reader ENCD1 = encoder_reader(&htim3); //A6 A7
 8000f74:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000f78:	495d      	ldr	r1, [pc, #372]	; (80010f0 <main+0x1b4>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff6e 	bl	8000e5c <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>
           // Encoder 1 is the Left Rear Wheel
           encoder_reader ENCD2 = encoder_reader(&htim4); //B6 B7
 8000f80:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000f84:	495b      	ldr	r1, [pc, #364]	; (80010f4 <main+0x1b8>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff68 	bl	8000e5c <_ZN14encoder_readerC1EP17TIM_HandleTypeDef>
           // Encoder 2 is the right rear Wheel
           motor_driver MOTOR_1 = motor_driver(&htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);		// Initialize the motor driver object as MOTOR_1
 8000f8c:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8000f90:	2304      	movs	r3, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	4958      	ldr	r1, [pc, #352]	; (80010f8 <main+0x1bc>)
 8000f96:	f000 fc5c 	bl	8001852 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>
           // Motor Driver 1 is The Left Rear Wheel
           // A5 A1
           motor_driver MOTOR_2 = motor_driver(&htim2, TIM_CHANNEL_3, TIM_CHANNEL_4);		// Initialize the motor driver object as MOTOR_2
 8000f9a:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4955      	ldr	r1, [pc, #340]	; (80010f8 <main+0x1bc>)
 8000fa4:	f000 fc55 	bl	8001852 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>
           // Motor Driver 2 is The Right Rear Wheel
           // A2 A3
           feedback_controller controller_1 = feedback_controller();
 8000fa8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fed5 	bl	8000d5c <_ZN19feedback_controllerC1Ev>
           feedback_controller controller_2 = feedback_controller();
 8000fb2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fed0 	bl	8000d5c <_ZN19feedback_controllerC1Ev>
           motor_driver FLYWHEEL = motor_driver(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2); // A8 A9
 8000fbc:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	494d      	ldr	r1, [pc, #308]	; (80010fc <main+0x1c0>)
 8000fc6:	f000 fc44 	bl	8001852 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>

           controller_1.set_KP(KP);
 8000fca:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <main+0x1c4>)
 8000fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff feeb 	bl	8000db2 <_ZN19feedback_controller6set_KPEs>
           controller_2.set_KP(KP);
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <main+0x1c4>)
 8000fde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fe2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fee2 	bl	8000db2 <_ZN19feedback_controller6set_KPEs>
           //controller_1.set_setpoint(SP1);
           //controller_2.set_setpoint(SP2);

         //  BNO055_imu IMU = BNO055_imu(&hi2c1);

           servo_driver SERVO1 = servo_driver(&htim5,TIM_CHANNEL_1);
 8000fee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4943      	ldr	r1, [pc, #268]	; (8001104 <main+0x1c8>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fd4e 	bl	8001a98 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>

           movement_task task1 = movement_task(MOTOR_1, MOTOR_2, ENCD1, ENCD2, controller_1, controller_2, &huart1);
 8000ffc:	f107 0664 	add.w	r6, r7, #100	; 0x64
 8001000:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <main+0x1b0>)
 8001002:	9317      	str	r3, [sp, #92]	; 0x5c
 8001004:	ad12      	add	r5, sp, #72	; 0x48
 8001006:	f507 748a 	add.w	r4, r7, #276	; 0x114
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	602b      	str	r3, [r5, #0]
 8001012:	ad0d      	add	r5, sp, #52	; 0x34
 8001014:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	602b      	str	r3, [r5, #0]
 8001020:	ac09      	add	r4, sp, #36	; 0x24
 8001022:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800102c:	ac05      	add	r4, sp, #20
 800102e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001038:	ac01      	add	r4, sp, #4
 800103a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800103e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001044:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800104e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001050:	4630      	mov	r0, r6
 8001052:	f7ff fa97 	bl	8000584 <_ZN13movement_taskC1E12motor_driverS0_14encoder_readerS1_19feedback_controllerS2_P20__UART_HandleTypeDef>
           sort_task	task2 = sort_task(SERVO1, &huart1,&hi2c1);
 8001056:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <main+0x1cc>)
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <main+0x1b0>)
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001068:	f000 fdb4 	bl	8001bd4 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef>





    uint8_t config_mode = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
    uint8_t imu_mode = 0b00001000;
 8001072:	2308      	movs	r3, #8
 8001074:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
    uint8_t cur_opmode[1] = {0};
 8001078:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800107c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]

    uint8_t calib_state[1] = {0};
 8001084:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001088:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

    uint8_t cur_pwrmode[1] = {0};
 8001090:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001094:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]

    uint8_t unit_sel = 0b00010001;
 800109c:	2311      	movs	r3, #17
 800109e:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d

	uint8_t raw_heading[2] = {0};
 80010a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]
	uint8_t raw_heading1[2] = {0};
 80010ae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80010b6:	2200      	movs	r2, #0
 80010b8:	801a      	strh	r2, [r3, #0]
	uint8_t raw_heading2[2] = {0};
 80010ba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
	uint8_t raw_heading3[2] = {0};
 80010c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010ca:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  	task1.run();
 80010d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff faee 	bl	80006b8 <_ZN13movement_task3runEv>
	  	task2.run();
 80010dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fdc9 	bl	8001c78 <_ZN9sort_task3runEv>
	  	task1.run();
 80010e6:	e7f4      	b.n	80010d2 <main+0x196>
 80010e8:	20000090 	.word	0x20000090
 80010ec:	20000250 	.word	0x20000250
 80010f0:	20000178 	.word	0x20000178
 80010f4:	200001c0 	.word	0x200001c0
 80010f8:	20000130 	.word	0x20000130
 80010fc:	200000e8 	.word	0x200000e8
 8001100:	20000000 	.word	0x20000000
 8001104:	20000208 	.word	0x20000208
 8001108:	20000094 	.word	0x20000094

0800110c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f946 	bl	80063ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <_Z18SystemClock_Configv+0xdc>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <_Z18SystemClock_Configv+0xdc>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <_Z18SystemClock_Configv+0xdc>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <_Z18SystemClock_Configv+0xe0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a25      	ldr	r2, [pc, #148]	; (80011ec <_Z18SystemClock_Configv+0xe0>)
 8001156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <_Z18SystemClock_Configv+0xe0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800117c:	2319      	movs	r3, #25
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fdf3 	bl	8003d7c <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80011a6:	f000 fb4f 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2103      	movs	r1, #3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 f850 	bl	800426c <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80011dc:	f000 fb34 	bl	8001848 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	; 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <_ZL12MX_I2C1_Initv+0x60>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 80011fc:	4a15      	ldr	r2, [pc, #84]	; (8001254 <_ZL12MX_I2C1_Initv+0x64>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 800120e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <_ZL12MX_I2C1_Initv+0x5c>)
 800122e:	f001 fde5 	bl	8002dfc <HAL_I2C_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001242:	f000 fb01 	bl	8001848 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000094 	.word	0x20000094
 8001250:	40005400 	.word	0x40005400
 8001254:	00061a80 	.word	0x00061a80

08001258 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b092      	sub	sp, #72	; 0x48
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2220      	movs	r2, #32
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f005 f892 	bl	80063ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 800128a:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <_ZL12MX_TIM1_Initv+0x14c>)
 800128c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800128e:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4899;
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 800129c:	f241 3223 	movw	r2, #4899	; 0x1323
 80012a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b4:	483a      	ldr	r0, [pc, #232]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 80012b6:	f003 f9b9 	bl	800462c <HAL_TIM_PWM_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80012ca:	f000 fabd 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012da:	4619      	mov	r1, r3
 80012dc:	4830      	ldr	r0, [pc, #192]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 80012de:	f003 fecd 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2301      	movne	r3, #1
 80012ea:	2300      	moveq	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80012f2:	f000 faa9 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 800131c:	f003 fbba 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001330:	f000 fa8a 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	2204      	movs	r2, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4818      	ldr	r0, [pc, #96]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 800133e:	f003 fba9 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001352:	f000 fa79 	bl	8001848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 800137a:	f003 feed 	bl	8005158 <HAL_TIMEx_ConfigBreakDeadTime>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZL12MX_TIM1_Initv+0x13a>
  {
    Error_Handler();
 800138e:	f000 fa5b 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <_ZL12MX_TIM1_Initv+0x148>)
 8001394:	f000 ff32 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3748      	adds	r7, #72	; 0x48
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000e8 	.word	0x200000e8
 80013a4:	40010000 	.word	0x40010000

080013a8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4899;
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013e0:	f241 3223 	movw	r2, #4899	; 0x1323
 80013e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013f2:	4838      	ldr	r0, [pc, #224]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80013f4:	f003 f91a 	bl	800462c <HAL_TIM_PWM_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf14      	ite	ne
 80013fe:	2301      	movne	r3, #1
 8001400:	2300      	moveq	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001408:	f000 fa1e 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	482e      	ldr	r0, [pc, #184]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 800141c:	f003 fe2e 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001430:	f000 fa0a 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001434:	2360      	movs	r3, #96	; 0x60
 8001436:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	4822      	ldr	r0, [pc, #136]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 800144c:	f003 fb22 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001460:	f000 f9f2 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	481a      	ldr	r0, [pc, #104]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 800146c:	f003 fb12 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001480:	f000 f9e2 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2208      	movs	r2, #8
 8001488:	4619      	mov	r1, r3
 800148a:	4812      	ldr	r0, [pc, #72]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 800148c:	f003 fb02 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf14      	ite	ne
 8001496:	2301      	movne	r3, #1
 8001498:	2300      	moveq	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 80014a0:	f000 f9d2 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	220c      	movs	r2, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	480a      	ldr	r0, [pc, #40]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014ac:	f003 faf2 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 80014c0:	f000 f9c2 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014c6:	f000 fe99 	bl	80021fc <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000130 	.word	0x20000130

080014d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 ff60 	bl	80063ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 80014f6:	4a26      	ldr	r2, [pc, #152]	; (8001590 <_ZL12MX_TIM3_Initv+0xb8>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4811      	ldr	r0, [pc, #68]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 8001546:	f003 f971 	bl	800482c <HAL_TIM_Encoder_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800155a:	f000 f975 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <_ZL12MX_TIM3_Initv+0xb4>)
 800156c:	f003 fd86 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001580:	f000 f962 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	; 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000178 	.word	0x20000178
 8001590:	40000400 	.word	0x40000400

08001594 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2224      	movs	r2, #36	; 0x24
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 ff02 	bl	80063ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <_ZL12MX_TIM4_Initv+0xb8>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 80015c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ee:	2301      	movs	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 8001602:	f003 f913 	bl	800482c <HAL_TIM_Encoder_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001616:	f000 f917 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <_ZL12MX_TIM4_Initv+0xb4>)
 8001628:	f003 fd28 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800163c:	f000 f904 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3730      	adds	r7, #48	; 0x30
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200001c0 	.word	0x200001c0
 800164c:	40000800 	.word	0x40000800

08001650 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 8001674:	4a29      	ldr	r2, [pc, #164]	; (800171c <_ZL12MX_TIM5_Initv+0xcc>)
 8001676:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 800167a:	225f      	movs	r2, #95	; 0x5f
 800167c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 8001686:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800168a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001698:	481f      	ldr	r0, [pc, #124]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 800169a:	f002 ffc7 	bl	800462c <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf14      	ite	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2300      	moveq	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 80016ae:	f000 f8cb 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	4619      	mov	r1, r3
 80016c0:	4815      	ldr	r0, [pc, #84]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 80016c2:	f003 fcdb 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 80016d6:	f000 f8b7 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016da:	2360      	movs	r3, #96	; 0x60
 80016dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 80016f2:	f003 f9cf 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf14      	ite	ne
 80016fc:	2301      	movne	r3, #1
 80016fe:	2300      	moveq	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8001706:	f000 f89f 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <_ZL12MX_TIM5_Initv+0xc8>)
 800170c:	f000 fd76 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000208 	.word	0x20000208
 800171c:	40000c00 	.word	0x40000c00

08001720 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 800172c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001758:	f003 fd50 	bl	80051fc <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800176c:	f000 f86c 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000250 	.word	0x20000250
 8001778:	40011000 	.word	0x40011000

0800177c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a28      	ldr	r2, [pc, #160]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a21      	ldr	r2, [pc, #132]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a1a      	ldr	r2, [pc, #104]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <_ZL12MX_GPIO_Initv+0xc0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <_ZL12MX_GPIO_Initv+0xc4>)
 8001818:	f001 f954 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800181c:	2301      	movs	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <_ZL12MX_GPIO_Initv+0xc8>)
 8001830:	f001 f948 	bl	8002ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	40020800 	.word	0x40020800
 8001844:	40020400 	.word	0x40020400

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>

08001852 <_ZN12motor_driverC1EP17TIM_HandleTypeDefmm>:
{

}

// Implementation of initializing constructor
motor_driver::motor_driver(TIM_HandleTypeDef* _htim,
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
		uint32_t _ch_a,
		uint32_t _ch_b)
    		:htim(_htim),
			 ch_a(_ch_a),
			 ch_b(_ch_b)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	60da      	str	r2, [r3, #12]
{
	htim = _htim;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	60da      	str	r2, [r3, #12]
	ch_a = _ch_a;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	605a      	str	r2, [r3, #4]
	ch_b = _ch_b;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	609a      	str	r2, [r3, #8]
	Duty_Cycle = 0;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch_a);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f002 ff19 	bl	80046cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch_b);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f002 ff11 	bl	80046cc <HAL_TIM_PWM_Start>
}
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN12motor_driver7Set_PWMEs>:


// Implementation of Set PWM Method
void motor_driver::Set_PWM(int16_t	_Duty_Cycle)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
	  */

	// Saturate the input between -1000 and 1000


	if (_Duty_Cycle < -5000) {
 80018c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018c4:	4a72      	ldr	r2, [pc, #456]	; (8001a90 <_ZN12motor_driver7Set_PWMEs+0x1dc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	da03      	bge.n	80018d2 <_ZN12motor_driver7Set_PWMEs+0x1e>
		_Duty_Cycle = -5000;
 80018ca:	f64e 4378 	movw	r3, #60536	; 0xec78
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	e008      	b.n	80018e4 <_ZN12motor_driver7Set_PWMEs+0x30>
	} else if (_Duty_Cycle > 5000){
 80018d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	dd02      	ble.n	80018e4 <_ZN12motor_driver7Set_PWMEs+0x30>
		_Duty_Cycle = 5000;
 80018de:	f241 3388 	movw	r3, #5000	; 0x1388
 80018e2:	807b      	strh	r3, [r7, #2]
	}


	Duty_Cycle = _Duty_Cycle;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	801a      	strh	r2, [r3, #0]

	int16_t PULSE = abs(Duty_Cycle*4899/10000);	// convert the duty cycle in percentage to the pulse width of PWM signal
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f241 3323 	movw	r3, #4899	; 0x1323
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a66      	ldr	r2, [pc, #408]	; (8001a94 <_ZN12motor_driver7Set_PWMEs+0x1e0>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1312      	asrs	r2, r2, #12
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	bfb8      	it	lt
 800190a:	425b      	neglt	r3, r3
 800190c:	81fb      	strh	r3, [r7, #14]

	// Set the output PWM channels per the sign of input duty cycle
	if (Duty_Cycle < 0){
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da5a      	bge.n	80019ce <_ZN12motor_driver7Set_PWMEs+0x11a>
		__HAL_TIM_SET_COMPARE(htim,ch_a,4899);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <_ZN12motor_driver7Set_PWMEs+0x7a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f241 3223 	movw	r2, #4899	; 0x1323
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
 800192c:	e01b      	b.n	8001966 <_ZN12motor_driver7Set_PWMEs+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b04      	cmp	r3, #4
 8001934:	d106      	bne.n	8001944 <_ZN12motor_driver7Set_PWMEs+0x90>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f241 3223 	movw	r2, #4899	; 0x1323
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
 8001942:	e010      	b.n	8001966 <_ZN12motor_driver7Set_PWMEs+0xb2>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d106      	bne.n	800195a <_ZN12motor_driver7Set_PWMEs+0xa6>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f241 3223 	movw	r2, #4899	; 0x1323
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c
 8001958:	e005      	b.n	8001966 <_ZN12motor_driver7Set_PWMEs+0xb2>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f241 3223 	movw	r2, #4899	; 0x1323
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <_ZN12motor_driver7Set_PWMEs+0xce>
 800196e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001972:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 8001976:	3303      	adds	r3, #3
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68d2      	ldr	r2, [r2, #12]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	6353      	str	r3, [r2, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(htim,ch_a,(4899-PULSE));
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
	}
}
 8001980:	e07f      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b04      	cmp	r3, #4
 8001988:	d109      	bne.n	800199e <_ZN12motor_driver7Set_PWMEs+0xea>
 800198a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800198e:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 8001992:	3303      	adds	r3, #3
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68d2      	ldr	r2, [r2, #12]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800199c:	e071      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d109      	bne.n	80019ba <_ZN12motor_driver7Set_PWMEs+0x106>
 80019a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019aa:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80019ae:	3303      	adds	r3, #3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68d2      	ldr	r2, [r2, #12]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80019b8:	e063      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,(4899-(PULSE)));
 80019ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019be:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80019c2:	3303      	adds	r3, #3
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68d2      	ldr	r2, [r2, #12]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80019cc:	e059      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_a,(4899-PULSE));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <_ZN12motor_driver7Set_PWMEs+0x136>
 80019d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019da:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80019de:	3303      	adds	r3, #3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68d2      	ldr	r2, [r2, #12]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	6353      	str	r3, [r2, #52]	; 0x34
 80019e8:	e024      	b.n	8001a34 <_ZN12motor_driver7Set_PWMEs+0x180>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d109      	bne.n	8001a06 <_ZN12motor_driver7Set_PWMEs+0x152>
 80019f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019f6:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 80019fa:	3303      	adds	r3, #3
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68d2      	ldr	r2, [r2, #12]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	6393      	str	r3, [r2, #56]	; 0x38
 8001a04:	e016      	b.n	8001a34 <_ZN12motor_driver7Set_PWMEs+0x180>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d109      	bne.n	8001a22 <_ZN12motor_driver7Set_PWMEs+0x16e>
 8001a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a12:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 8001a16:	3303      	adds	r3, #3
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68d2      	ldr	r2, [r2, #12]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a20:	e008      	b.n	8001a34 <_ZN12motor_driver7Set_PWMEs+0x180>
 8001a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a26:	f5c3 5399 	rsb	r3, r3, #4896	; 0x1320
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68d2      	ldr	r2, [r2, #12]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d106      	bne.n	8001a4a <_ZN12motor_driver7Set_PWMEs+0x196>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f241 3223 	movw	r2, #4899	; 0x1323
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a48:	e01b      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d106      	bne.n	8001a60 <_ZN12motor_driver7Set_PWMEs+0x1ac>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f241 3223 	movw	r2, #4899	; 0x1323
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a5e:	e010      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d106      	bne.n	8001a76 <_ZN12motor_driver7Set_PWMEs+0x1c2>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f241 3223 	movw	r2, #4899	; 0x1323
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a74:	e005      	b.n	8001a82 <_ZN12motor_driver7Set_PWMEs+0x1ce>
		__HAL_TIM_SET_COMPARE(htim,ch_b,4899);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f241 3223 	movw	r2, #4899	; 0x1323
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	ffffec78 	.word	0xffffec78
 8001a94:	68db8bad 	.word	0x68db8bad

08001a98 <_ZN12servo_driverC1EP17TIM_HandleTypeDefm>:
{

}

// Implementation of initializing constructor
servo_driver::servo_driver(TIM_HandleTypeDef* _htim,
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
		uint32_t _channel)
    		:htim(_htim),
			 channel(_channel)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	609a      	str	r2, [r3, #8]
{
	htim = _htim;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	609a      	str	r2, [r3, #8]
	channel = _channel;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
	ANGLE = 0;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,channel);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f002 fdfd 	bl	80046cc <HAL_TIM_PWM_Start>
}
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_ZN12servo_driver12Set_PositionEs>:


// Implementation of Set PWM Method
void servo_driver::Set_Position(int16_t	_ANGLE)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
	  * @brief  Sets the PWM for specified duty cycle for a specified motor driver
	  * @param  Duty_Cycle: int32_t of the desired duty cycle
	  */

	// Saturate the input between -90 and 90
	ANGLE = _ANGLE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	801a      	strh	r2, [r3, #0]

	if (ANGLE < -90) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001af8:	da04      	bge.n	8001b04 <_ZN12servo_driver12Set_PositionEs+0x28>
		ANGLE = -90;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f64f 72a6 	movw	r2, #65446	; 0xffa6
 8001b00:	801a      	strh	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <_ZN12servo_driver12Set_PositionEs+0x38>
	} else if (ANGLE > 90){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0a:	2b5a      	cmp	r3, #90	; 0x5a
 8001b0c:	dd02      	ble.n	8001b14 <_ZN12servo_driver12Set_PositionEs+0x38>
		ANGLE = 90;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	225a      	movs	r2, #90	; 0x5a
 8001b12:	801a      	strh	r2, [r3, #0]
	}

	int16_t PULSE = 0;		// intialize pulse signal
 8001b14:	2300      	movs	r3, #0
 8001b16:	81fb      	strh	r3, [r7, #14]
	if (ANGLE<0){
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da14      	bge.n	8001b4c <_ZN12servo_driver12Set_PositionEs+0x70>
		PULSE = 1500 + ANGLE*500/90;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <_ZN12servo_driver12Set_PositionEs+0xf4>)
 8001b34:	fb82 1203 	smull	r1, r2, r2, r3
 8001b38:	441a      	add	r2, r3
 8001b3a:	1192      	asrs	r2, r2, #6
 8001b3c:	17db      	asrs	r3, r3, #31
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	81fb      	strh	r3, [r7, #14]
 8001b4a:	e013      	b.n	8001b74 <_ZN12servo_driver12Set_PositionEs+0x98>
	}
	else{
		PULSE = 1500 + ANGLE*500/90;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <_ZN12servo_driver12Set_PositionEs+0xf4>)
 8001b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b62:	441a      	add	r2, r3
 8001b64:	1192      	asrs	r2, r2, #6
 8001b66:	17db      	asrs	r3, r3, #31
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <_ZN12servo_driver12Set_PositionEs+0xae>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34

	}
 8001b88:	e01b      	b.n	8001bc2 <_ZN12servo_driver12Set_PositionEs+0xe6>
	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d106      	bne.n	8001ba0 <_ZN12servo_driver12Set_PositionEs+0xc4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8001b9e:	e010      	b.n	8001bc2 <_ZN12servo_driver12Set_PositionEs+0xe6>
	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d106      	bne.n	8001bb6 <_ZN12servo_driver12Set_PositionEs+0xda>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001bb4:	e005      	b.n	8001bc2 <_ZN12servo_driver12Set_PositionEs+0xe6>
	__HAL_TIM_SET_COMPARE(htim,channel,PULSE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	b60b60b7 	.word	0xb60b60b7

08001bd4 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef>:
#include <stdio.h>
#include "main.h"
#include "stm32f4xx_hal.h"
#include "sorting_task.h"

sort_task::sort_task(servo_driver _servo,
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4638      	mov	r0, r7
 8001bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				curr_time(0),
				start_count(0),
				hi2c(_hi2c),
				red_val(0),
				green_val(0),
				blue_val(0)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	609a      	str	r2, [r3, #8]
						(sort_task::state_fcn) &sort_task::state_2}),
 8001bf4:	2018      	movs	r0, #24
 8001bf6:	f004 fb83 	bl	8006300 <_Znaj>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef+0x98>)
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	3308      	adds	r3, #8
 8001c0a:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef+0x9c>)
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	3308      	adds	r3, #8
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <_ZN9sort_taskC1E12servo_driverP20__UART_HandleTypeDefP17I2C_HandleTypeDef+0xa0>)
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	605a      	str	r2, [r3, #4]
				blue_val(0)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	60d9      	str	r1, [r3, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3310      	adds	r3, #16
 8001c24:	463a      	mov	r2, r7
 8001c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	61da      	str	r2, [r3, #28]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	841a      	strh	r2, [r3, #32]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	869a      	strh	r2, [r3, #52]	; 0x34
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	871a      	strh	r2, [r3, #56]	; 0x38
{

}
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	08001d15 	.word	0x08001d15
 8001c70:	08001dd1 	.word	0x08001dd1
 8001c74:	08001f11 	.word	0x08001f11

08001c78 <_ZN9sort_task3runEv>:

void sort_task::run(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if (state>=0 && state<num_states)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d239      	bcs.n	8001d00 <_ZN9sort_task3runEv+0x88>
	{
		(this->*state_list[state])();
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	105b      	asrs	r3, r3, #1
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1898      	adds	r0, r3, r2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <_ZN9sort_task3runEv+0x6c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	105b      	asrs	r3, r3, #1
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68d1      	ldr	r1, [r2, #12]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	440a      	add	r2, r1
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e006      	b.n	8001cf2 <_ZN9sort_task3runEv+0x7a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4798      	blx	r3

		runs++;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	605a      	str	r2, [r3, #4]
	{
		printf("Error Invalid State");
		while(1){}

	}
}
 8001cfe:	e003      	b.n	8001d08 <_ZN9sort_task3runEv+0x90>
		printf("Error Invalid State");
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <_ZN9sort_task3runEv+0x98>)
 8001d02:	f004 fc3b 	bl	800657c <iprintf>
		while(1){}
 8001d06:	e7fe      	b.n	8001d06 <_ZN9sort_task3runEv+0x8e>
}
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	080077b4 	.word	0x080077b4

08001d14 <_ZN9sort_task7state_0Ev>:

void sort_task::state_0(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af04      	add	r7, sp, #16
 8001d1a:	6078      	str	r0, [r7, #4]
	// Initialization state
	// Set servo to zero
	uint8_t enable_set = 0b00001011;
 8001d1c:	230b      	movs	r3, #11
 8001d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t timing_set = 0xD5;
 8001d22:	23d5      	movs	r3, #213	; 0xd5
 8001d24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t wait_set = 0x8B;
 8001d28:	238b      	movs	r3, #139	; 0x8b
 8001d2a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	HAL_I2C_Mem_Write(hi2c, rgb_addr, enable_addr, 1, &enable_set, 1, HAL_MAX_DELAY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	2152      	movs	r1, #82	; 0x52
 8001d48:	f001 f99c 	bl	8003084 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, rgb_addr, timing_addr, 1, &timing_set, 1, HAL_MAX_DELAY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	2301      	movs	r3, #1
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	2281      	movs	r2, #129	; 0x81
 8001d64:	2152      	movs	r1, #82	; 0x52
 8001d66:	f001 f98d 	bl	8003084 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, rgb_addr, wait_addr, 1, &wait_set, 1, HAL_MAX_DELAY);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	2282      	movs	r2, #130	; 0x82
 8001d82:	2152      	movs	r1, #82	; 0x52
 8001d84:	f001 f97e 	bl	8003084 <HAL_I2C_Mem_Write>

	state = 1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
	char buffer[50] = {0};
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	222e      	movs	r2, #46	; 0x2e
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fb06 	bl	80063ac <memset>
	int32_t s4 = sprintf(buffer, "Task 2 State 0 \r\n");
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4909      	ldr	r1, [pc, #36]	; (8001dcc <_ZN9sort_task7state_0Ev+0xb8>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 fc54 	bl	8006654 <siprintf>
 8001dac:	6478      	str	r0, [r7, #68]	; 0x44
	HAL_UART_Transmit(huart,(uint8_t*) buffer, s4, 1000);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69d8      	ldr	r0, [r3, #28]
 8001db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f107 010c 	add.w	r1, r7, #12
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	f003 fa6a 	bl	8005296 <HAL_UART_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	3748      	adds	r7, #72	; 0x48
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	080077c8 	.word	0x080077c8

08001dd0 <_ZN9sort_task7state_1Ev>:

void sort_task::state_1(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b098      	sub	sp, #96	; 0x60
 8001dd4:	af04      	add	r7, sp, #16
 8001dd6:	6078      	str	r0, [r7, #4]
	// Sort the ball from RGB data
	uint8_t red_buff[2], green_buff[2], blue_buff[2];
	HAL_I2C_Mem_Read(hi2c, rgb_addr, red_addr, 1, red_buff, 2, HAL_MAX_DELAY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2302      	movs	r3, #2
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	2296      	movs	r2, #150	; 0x96
 8001df0:	2152      	movs	r1, #82	; 0x52
 8001df2:	f001 fa41 	bl	8003278 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(hi2c, rgb_addr, green_addr, 1, green_buff, 2, HAL_MAX_DELAY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	2298      	movs	r2, #152	; 0x98
 8001e0e:	2152      	movs	r1, #82	; 0x52
 8001e10:	f001 fa32 	bl	8003278 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(hi2c, rgb_addr, blue_addr, 1, blue_buff, 2, HAL_MAX_DELAY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2302      	movs	r3, #2
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2298      	movs	r2, #152	; 0x98
 8001e2c:	2152      	movs	r1, #82	; 0x52
 8001e2e:	f001 fa23 	bl	8003278 <HAL_I2C_Mem_Read>
	red_val =(uint16_t)(red_buff[1]<<8 | red_buff[0]);
 8001e32:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	869a      	strh	r2, [r3, #52]	; 0x34
	green_val =(uint16_t)(green_buff[1]<<8 | green_buff[0]);
 8001e4a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	86da      	strh	r2, [r3, #54]	; 0x36
	blue_val =(uint16_t)(blue_buff[1]<<8 | blue_buff[0]);
 8001e62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	871a      	strh	r2, [r3, #56]	; 0x38

	start_ticks = 1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
	servo.Set_Position(servo_angle);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 0210 	add.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f7ff fe24 	bl	8001adc <_ZN12servo_driver12Set_PositionEs>

	char buffer[50] = {0};
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	222e      	movs	r2, #46	; 0x2e
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 fa83 	bl	80063ac <memset>
	int32_t s4 = sprintf(buffer, "Red: %ld Green: %ld Blue: %ld \r\n", red_val, green_val, blue_val);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001eb6:	f107 000c 	add.w	r0, r7, #12
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4913      	ldr	r1, [pc, #76]	; (8001f0c <_ZN9sort_task7state_1Ev+0x13c>)
 8001ec0:	f004 fbc8 	bl	8006654 <siprintf>
 8001ec4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(huart,(uint8_t*) buffer, s4, 1000);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69d8      	ldr	r0, [r3, #28]
 8001eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f107 010c 	add.w	r1, r7, #12
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	f003 f9de 	bl	8005296 <HAL_UART_Transmit>

	if ((red_val > 50) && (green_val < 50) && (blue_val < 50))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001ede:	2b32      	cmp	r3, #50	; 0x32
 8001ee0:	d90d      	bls.n	8001efe <_ZN9sort_task7state_1Ev+0x12e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee6:	2b31      	cmp	r3, #49	; 0x31
 8001ee8:	d809      	bhi.n	8001efe <_ZN9sort_task7state_1Ev+0x12e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001eee:	2b31      	cmp	r3, #49	; 0x31
 8001ef0:	d805      	bhi.n	8001efe <_ZN9sort_task7state_1Ev+0x12e>
	{
		servo_angle = 90;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	225a      	movs	r2, #90	; 0x5a
 8001ef6:	841a      	strh	r2, [r3, #32]
		state = 2;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(100);
 8001efe:	2064      	movs	r0, #100	; 0x64
 8001f00:	f000 fc18 	bl	8002734 <HAL_Delay>


}
 8001f04:	bf00      	nop
 8001f06:	3750      	adds	r7, #80	; 0x50
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	080077dc 	.word	0x080077dc

08001f10 <_ZN9sort_task7state_2Ev>:

void sort_task::state_2(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	if (start_ticks == 1){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <_ZN9sort_task7state_2Ev+0x22>
		start_count =  HAL_GetTick();
 8001f20:	f000 fbfc 	bl	800271c <HAL_GetTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	859a      	strh	r2, [r3, #44]	; 0x2c
		start_ticks = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	curr_time = HAL_GetTick() - start_count;	// elapsed time in the current state
 8001f32:	f000 fbf3 	bl	800271c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
	servo.Set_Position(servo_angle);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0210 	add.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f7ff fdc3 	bl	8001adc <_ZN12servo_driver12Set_PositionEs>

	if (curr_time > 2000){		// Transition to sort balls after 2 seconds and return to 0 degree position
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f5e:	d90f      	bls.n	8001f80 <_ZN9sort_task7state_2Ev+0x70>
		state = 1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
		servo_angle = 0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	841a      	strh	r2, [r3, #32]
		servo.Set_Position(servo_angle);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f103 0210 	add.w	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7ff fdae 	bl	8001adc <_ZN12servo_driver12Set_PositionEs>
	}

}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_I2C_MspInit+0x84>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12c      	bne.n	8002054 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_I2C_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_I2C_MspInit+0x88>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_I2C_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201c:	2312      	movs	r3, #18
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002028:	2304      	movs	r3, #4
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	480c      	ldr	r0, [pc, #48]	; (8002064 <HAL_I2C_MspInit+0x8c>)
 8002034:	f000 fd46 	bl	8002ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_I2C_MspInit+0x88>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_I2C_MspInit+0x88>)
 8002042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_I2C_MspInit+0x88>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40005400 	.word	0x40005400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020400 	.word	0x40020400

08002068 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002096:	e026      	b.n	80020e6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a0:	d10e      	bne.n	80020c0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
}
 80020be:	e012      	b.n	80020e6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_TIM_PWM_MspInit+0x94>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10d      	bne.n	80020e6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_TIM_PWM_MspInit+0x90>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40000c00 	.word	0x40000c00

08002100 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12c      	bne.n	800217c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a30      	ldr	r2, [pc, #192]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a29      	ldr	r2, [pc, #164]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800216a:	2302      	movs	r3, #2
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	481e      	ldr	r0, [pc, #120]	; (80021f0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002176:	f000 fca5 	bl	8002ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800217a:	e030      	b.n	80021de <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12b      	bne.n	80021de <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_TIM_Encoder_MspInit+0xec>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021be:	23c0      	movs	r3, #192	; 0xc0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ce:	2302      	movs	r3, #2
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80021da:	f000 fc73 	bl	8002ac4 <HAL_GPIO_Init>
}
 80021de:	bf00      	nop
 80021e0:	3730      	adds	r7, #48	; 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40020400 	.word	0x40020400

080021fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_TIM_MspPostInit+0xf8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11f      	bne.n	800225e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800223a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4829      	ldr	r0, [pc, #164]	; (80022fc <HAL_TIM_MspPostInit+0x100>)
 8002258:	f000 fc34 	bl	8002ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800225c:	e046      	b.n	80022ec <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d11e      	bne.n	80022a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6313      	str	r3, [r2, #48]	; 0x30
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002284:	232e      	movs	r3, #46	; 0x2e
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	4817      	ldr	r0, [pc, #92]	; (80022fc <HAL_TIM_MspPostInit+0x100>)
 80022a0:	f000 fc10 	bl	8002ac4 <HAL_GPIO_Init>
}
 80022a4:	e022      	b.n	80022ec <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_TIM_MspPostInit+0x104>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d11d      	bne.n	80022ec <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6313      	str	r3, [r2, #48]	; 0x30
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_TIM_MspPostInit+0xfc>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022cc:	2301      	movs	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022dc:	2302      	movs	r3, #2
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <HAL_TIM_MspPostInit+0x100>)
 80022e8:	f000 fbec 	bl	8002ac4 <HAL_GPIO_Init>
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40000c00 	.word	0x40000c00

08002304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <HAL_UART_MspInit+0xd0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d152      	bne.n	80023cc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_UART_MspInit+0xd4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800238c:	2307      	movs	r3, #7
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4811      	ldr	r0, [pc, #68]	; (80023dc <HAL_UART_MspInit+0xd8>)
 8002398:	f000 fb94 	bl	8002ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800239c:	2308      	movs	r3, #8
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ac:	2307      	movs	r3, #7
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	480a      	ldr	r0, [pc, #40]	; (80023e0 <HAL_UART_MspInit+0xdc>)
 80023b8:	f000 fb84 	bl	8002ac4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	2025      	movs	r0, #37	; 0x25
 80023c2:	f000 fab6 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023c6:	2025      	movs	r0, #37	; 0x25
 80023c8:	f000 facf 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40011000 	.word	0x40011000
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002430:	f000 f960 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <USART1_IRQHandler+0x10>)
 800243e:	f002 ffed 	bl	800541c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000250 	.word	0x20000250

0800244c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_kill>:

int _kill(int pid, int sig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002466:	f003 ff6f 	bl	8006348 <__errno>
 800246a:	4603      	mov	r3, r0
 800246c:	2216      	movs	r2, #22
 800246e:	601a      	str	r2, [r3, #0]
  return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_exit>:

void _exit (int status)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffe7 	bl	800245c <_kill>
  while (1) {}    /* Make sure we hang here */
 800248e:	e7fe      	b.n	800248e <_exit+0x12>

08002490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00a      	b.n	80024b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a2:	f3af 8000 	nop.w
 80024a6:	4601      	mov	r1, r0
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbf0      	blt.n	80024a2 <_read+0x12>
  }

  return len;
 80024c0:	687b      	ldr	r3, [r7, #4]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e009      	b.n	80024f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60ba      	str	r2, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbf1      	blt.n	80024dc <_write+0x12>
  }
  return len;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_close>:

int _close(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	605a      	str	r2, [r3, #4]
  return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_isatty>:

int _isatty(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f003 fed4 	bl	8006348 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20020000 	.word	0x20020000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20000294 	.word	0x20000294
 80025d4:	200002b0 	.word	0x200002b0

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	; (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7ff ffd7 	bl	80025d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f003 fe93 	bl	8006354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7fe fc85 	bl	8000f3c <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002640:	080078c0 	.word	0x080078c0
  ldr r2, =_sbss
 8002644:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002648:	200002b0 	.word	0x200002b0

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_Init+0x40>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_Init+0x40>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_Init+0x40>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 f94f 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267e:	200f      	movs	r0, #15
 8002680:	f000 f808 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002684:	f7ff fc80 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x54>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f967 	bl	8002986 <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d80a      	bhi.n	80026de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d0:	f000 f92f 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <HAL_InitTick+0x5c>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000004 	.word	0x20000004
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	20000008 	.word	0x20000008

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	2000000c 	.word	0x2000000c
 8002718:	20000298 	.word	0x20000298

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000298 	.word	0x20000298

08002734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff ffee 	bl	800271c <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274c:	d005      	beq.n	800275a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_Delay+0x44>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275a:	bf00      	nop
 800275c:	f7ff ffde 	bl	800271c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f7      	bhi.n	800275c <HAL_Delay+0x28>
  {
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000000c 	.word	0x2000000c

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff3e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff8e 	bl	8002870 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff31 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff feb6 	bl	800271c <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d008      	beq.n	80029d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e052      	b.n	8002a76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0216 	bic.w	r2, r2, #22
 80029de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <HAL_DMA_Abort+0x62>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0208 	bic.w	r2, r2, #8
 8002a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a20:	e013      	b.n	8002a4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a22:	f7ff fe7b 	bl	800271c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d90c      	bls.n	8002a4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e015      	b.n	8002a76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e4      	bne.n	8002a22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	223f      	movs	r2, #63	; 0x3f
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e00c      	b.n	8002ab6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e159      	b.n	8002d94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f040 8148 	bne.w	8002d8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d005      	beq.n	8002b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d130      	bne.n	8002b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 0201 	and.w	r2, r3, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d017      	beq.n	8002bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d123      	bne.n	8002c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a2 	beq.w	8002d8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b57      	ldr	r3, [pc, #348]	; (8002dac <HAL_GPIO_Init+0x2e8>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a56      	ldr	r2, [pc, #344]	; (8002dac <HAL_GPIO_Init+0x2e8>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b54      	ldr	r3, [pc, #336]	; (8002dac <HAL_GPIO_Init+0x2e8>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c66:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_GPIO_Init+0x2ec>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <HAL_GPIO_Init+0x2f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d019      	beq.n	8002cc6 <HAL_GPIO_Init+0x202>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a48      	ldr	r2, [pc, #288]	; (8002db8 <HAL_GPIO_Init+0x2f4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_GPIO_Init+0x1fe>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <HAL_GPIO_Init+0x2f8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00d      	beq.n	8002cbe <HAL_GPIO_Init+0x1fa>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a46      	ldr	r2, [pc, #280]	; (8002dc0 <HAL_GPIO_Init+0x2fc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <HAL_GPIO_Init+0x1f6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a45      	ldr	r2, [pc, #276]	; (8002dc4 <HAL_GPIO_Init+0x300>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_GPIO_Init+0x1f2>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x204>
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x204>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x204>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x204>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x204>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f002 0203 	and.w	r2, r2, #3
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd8:	4935      	ldr	r1, [pc, #212]	; (8002db0 <HAL_GPIO_Init+0x2ec>)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	f67f aea2 	bls.w	8002ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40013800 	.word	0x40013800
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	40020c00 	.word	0x40020c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40013c00 	.word	0x40013c00

08002dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e001      	b.n	8002dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff f8d8 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f001 fbbc 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	; (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	; (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	; (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	; (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7ff fb3d 	bl	800271c <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 80d9 	bne.w	8003264 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2319      	movs	r3, #25
 80030b8:	2201      	movs	r2, #1
 80030ba:	496d      	ldr	r1, [pc, #436]	; (8003270 <HAL_I2C_Mem_Write+0x1ec>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fc7f 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0cc      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Mem_Write+0x56>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0c5      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d007      	beq.n	8003100 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2221      	movs	r2, #33	; 0x21
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a4d      	ldr	r2, [pc, #308]	; (8003274 <HAL_I2C_Mem_Write+0x1f0>)
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003142:	88f8      	ldrh	r0, [r7, #6]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fab6 	bl	80036c4 <I2C_RequestMemoryWrite>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d052      	beq.n	8003204 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e081      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fd00 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b04      	cmp	r3, #4
 8003178:	d107      	bne.n	800318a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06b      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d11b      	bne.n	8003204 <HAL_I2C_Mem_Write+0x180>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d017      	beq.n	8003204 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1aa      	bne.n	8003162 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fcec 	bl	8003bee <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003232:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e016      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	00100002 	.word	0x00100002
 8003274:	ffff0000 	.word	0xffff0000

08003278 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08c      	sub	sp, #48	; 0x30
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003292:	f7ff fa43 	bl	800271c <HAL_GetTick>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	f040 8208 	bne.w	80036b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2319      	movs	r3, #25
 80032ac:	2201      	movs	r2, #1
 80032ae:	497b      	ldr	r1, [pc, #492]	; (800349c <HAL_I2C_Mem_Read+0x224>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fb85 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	e1fb      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Mem_Read+0x56>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e1f4      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d007      	beq.n	80032f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2222      	movs	r2, #34	; 0x22
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2240      	movs	r2, #64	; 0x40
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a5b      	ldr	r2, [pc, #364]	; (80034a0 <HAL_I2C_Mem_Read+0x228>)
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003336:	88f8      	ldrh	r0, [r7, #6]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	8979      	ldrh	r1, [r7, #10]
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4603      	mov	r3, r0
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fa52 	bl	80037f0 <I2C_RequestMemoryRead>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1b0      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d113      	bne.n	8003386 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	623b      	str	r3, [r7, #32]
 8003372:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e184      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	2b01      	cmp	r3, #1
 800338c:	d11b      	bne.n	80033c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e164      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d11b      	bne.n	8003406 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	e144      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800341c:	e138      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	2b03      	cmp	r3, #3
 8003424:	f200 80f1 	bhi.w	800360a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	2b01      	cmp	r3, #1
 800342e:	d123      	bne.n	8003478 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fc1b 	bl	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e139      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003476:	e10b      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b02      	cmp	r3, #2
 800347e:	d14e      	bne.n	800351e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	2200      	movs	r2, #0
 8003488:	4906      	ldr	r1, [pc, #24]	; (80034a4 <HAL_I2C_Mem_Read+0x22c>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa98 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e10e      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
 800349a:	bf00      	nop
 800349c:	00100002 	.word	0x00100002
 80034a0:	ffff0000 	.word	0xffff0000
 80034a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800351c:	e0b8      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2200      	movs	r2, #0
 8003526:	4966      	ldr	r1, [pc, #408]	; (80036c0 <HAL_I2C_Mem_Read+0x448>)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa49 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0bf      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2200      	movs	r2, #0
 8003582:	494f      	ldr	r1, [pc, #316]	; (80036c0 <HAL_I2C_Mem_Read+0x448>)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fa1b 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e091      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003608:	e042      	b.n	8003690 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fb2e 	bl	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e04c      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d118      	bne.n	8003690 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f aec2 	bne.w	800341e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	00010004 	.word	0x00010004

080036c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	817b      	strh	r3, [r7, #10]
 80036d6:	460b      	mov	r3, r1
 80036d8:	813b      	strh	r3, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f960 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003714:	d103      	bne.n	800371e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e05f      	b.n	80037e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	492d      	ldr	r1, [pc, #180]	; (80037ec <I2C_RequestMemoryWrite+0x128>)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f998 	bl	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e04c      	b.n	80037e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	6a39      	ldr	r1, [r7, #32]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fa02 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b04      	cmp	r3, #4
 8003774:	d107      	bne.n	8003786 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e02b      	b.n	80037e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003790:	893b      	ldrh	r3, [r7, #8]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]
 800379a:	e021      	b.n	80037e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800379c:	893b      	ldrh	r3, [r7, #8]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	6a39      	ldr	r1, [r7, #32]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f9dc 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d107      	bne.n	80037d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e005      	b.n	80037e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d6:	893b      	ldrh	r3, [r7, #8]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	00010002 	.word	0x00010002

080037f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	817b      	strh	r3, [r7, #10]
 8003802:	460b      	mov	r3, r1
 8003804:	813b      	strh	r3, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003818:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2200      	movs	r2, #0
 8003832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8c2 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003850:	d103      	bne.n	800385a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0aa      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800386c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	4952      	ldr	r1, [pc, #328]	; (80039bc <I2C_RequestMemoryRead+0x1cc>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f8fa 	bl	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e097      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f964 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e076      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	611a      	str	r2, [r3, #16]
 80038d6:	e021      	b.n	800391c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038d8:	893b      	ldrh	r3, [r7, #8]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f93e 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e050      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f923 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	2b04      	cmp	r3, #4
 8003932:	d107      	bne.n	8003944 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e035      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003956:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2200      	movs	r2, #0
 8003960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f82b 	bl	80039c0 <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	d103      	bne.n	8003988 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e013      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800398c:	897b      	ldrh	r3, [r7, #10]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	6a3a      	ldr	r2, [r7, #32]
 80039a0:	4906      	ldr	r1, [pc, #24]	; (80039bc <I2C_RequestMemoryRead+0x1cc>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f863 	bl	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	00010002 	.word	0x00010002

080039c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d0:	e025      	b.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d8:	d021      	beq.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fe fe9f 	bl	800271c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e023      	b.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10d      	bne.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	e00c      	b.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf0c      	ite	eq
 8003a56:	2301      	moveq	r3, #1
 8003a58:	2300      	movne	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d0b6      	beq.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7c:	e051      	b.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d123      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0204 	orr.w	r2, r3, #4
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e046      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003adc:	d021      	beq.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fe1d 	bl	800271c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e020      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10c      	bne.n	8003b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	43da      	mvns	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e00b      	b.n	8003b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d18d      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b78:	e02d      	b.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f8ce 	bl	8003d1c <I2C_IsAcknowledgeFailed>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e02d      	b.n	8003be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b90:	d021      	beq.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fe fdc3 	bl	800271c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e007      	b.n	8003be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d1ca      	bne.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bfa:	e02d      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f88d 	bl	8003d1c <I2C_IsAcknowledgeFailed>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e02d      	b.n	8003c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c12:	d021      	beq.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c14:	f7fe fd82 	bl	800271c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d116      	bne.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e007      	b.n	8003c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d1ca      	bne.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c7c:	e042      	b.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d119      	bne.n	8003cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0210 	mvn.w	r2, #16
 8003c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e029      	b.n	8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7fe fd2c 	bl	800271c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e007      	b.n	8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d1b5      	bne.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d11b      	bne.n	8003d6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f043 0204 	orr.w	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e267      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d075      	beq.n	8003e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9a:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b85      	ldr	r3, [pc, #532]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b82      	ldr	r3, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b7e      	ldr	r3, [pc, #504]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d157      	bne.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e242      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d106      	bne.n	8003df0 <HAL_RCC_OscConfig+0x74>
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a75      	ldr	r2, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x98>
 8003dfa:	4b70      	ldr	r3, [pc, #448]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6f      	ldr	r2, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6d      	ldr	r3, [pc, #436]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6c      	ldr	r2, [pc, #432]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003e14:	4b69      	ldr	r3, [pc, #420]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fc72 	bl	800271c <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fc6e 	bl	800271c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e207      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xc0>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fc5e 	bl	800271c <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe fc5a 	bl	800271c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1f3      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0xe8>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1c7      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4937      	ldr	r1, [pc, #220]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fc13 	bl	800271c <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fe fc0f 	bl	800271c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1a8      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fbf2 	bl	800271c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fbee 	bl	800271c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e187      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d036      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe fbd2 	bl	800271c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fbce 	bl	800271c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e167      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x200>
 8003f9a:	e01b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fbbb 	bl	800271c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	e00e      	b.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003faa:	f7fe fbb7 	bl	800271c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d907      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e150      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470000 	.word	0x42470000
 8003fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ea      	bne.n	8003faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8097 	beq.w	8004110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b81      	ldr	r3, [pc, #516]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a7c      	ldr	r2, [pc, #496]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b77      	ldr	r3, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b74      	ldr	r3, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a73      	ldr	r2, [pc, #460]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fe fb77 	bl	800271c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fe fb73 	bl	800271c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e10c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x2ea>
 8004058:	4b64      	ldr	r3, [pc, #400]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a63      	ldr	r2, [pc, #396]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e01c      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x30c>
 800406e:	4b5f      	ldr	r3, [pc, #380]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a5b      	ldr	r2, [pc, #364]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004088:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	4b55      	ldr	r3, [pc, #340]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a54      	ldr	r2, [pc, #336]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fe fb38 	bl	800271c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fe fb34 	bl	800271c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0cb      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	4b49      	ldr	r3, [pc, #292]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ee      	beq.n	80040b0 <HAL_RCC_OscConfig+0x334>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fe fb22 	bl	800271c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fe fb1e 	bl	800271c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0b5      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ee      	bne.n	80040dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	4a38      	ldr	r2, [pc, #224]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a1 	beq.w	800425c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d05c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d141      	bne.n	80041b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe faf2 	bl	800271c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe faee 	bl	800271c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e087      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	491b      	ldr	r1, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe fac7 	bl	800271c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe fac3 	bl	800271c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e05c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x416>
 80041b0:	e054      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fab0 	bl	800271c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe faac 	bl	800271c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e045      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x444>
 80041de:	e03d      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e038      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCC_OscConfig+0x4ec>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d028      	beq.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d121      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d11a      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800422e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	3b01      	subs	r3, #1
 8004242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0cc      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d90c      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d119      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e06f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e067      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4934      	ldr	r1, [pc, #208]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800435c:	f7fe f9de 	bl	800271c <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fe f9da 	bl	800271c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e04f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d20c      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	490a      	ldr	r1, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe f93e 	bl	8002694 <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00
 8004428:	40023800 	.word	0x40023800
 800442c:	08007800 	.word	0x08007800
 8004430:	20000004 	.word	0x20000004
 8004434:	20000008 	.word	0x20000008

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b090      	sub	sp, #64	; 0x40
 800443e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004448:	2300      	movs	r3, #0
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004450:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d00d      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x40>
 800445c:	2b08      	cmp	r3, #8
 800445e:	f200 80a1 	bhi.w	80045a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x34>
 8004466:	2b04      	cmp	r3, #4
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x3a>
 800446a:	e09b      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b53      	ldr	r3, [pc, #332]	; (80045bc <HAL_RCC_GetSysClockFreq+0x184>)
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004470:	e09b      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004472:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004476:	e098      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004478:	4b4f      	ldr	r3, [pc, #316]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004482:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d028      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	627a      	str	r2, [r7, #36]	; 0x24
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044a0:	2100      	movs	r1, #0
 80044a2:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044a4:	fb03 f201 	mul.w	r2, r3, r1
 80044a8:	2300      	movs	r3, #0
 80044aa:	fb00 f303 	mul.w	r3, r0, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	4a43      	ldr	r2, [pc, #268]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b2:	fba0 1202 	umull	r1, r2, r0, r2
 80044b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b8:	460a      	mov	r2, r1
 80044ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044be:	4413      	add	r3, r2
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2200      	movs	r2, #0
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	61fa      	str	r2, [r7, #28]
 80044ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044d2:	f7fb fed5 	bl	8000280 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4613      	mov	r3, r2
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044de:	e053      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	099b      	lsrs	r3, r3, #6
 80044e6:	2200      	movs	r2, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	617a      	str	r2, [r7, #20]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044f2:	f04f 0b00 	mov.w	fp, #0
 80044f6:	4652      	mov	r2, sl
 80044f8:	465b      	mov	r3, fp
 80044fa:	f04f 0000 	mov.w	r0, #0
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	0159      	lsls	r1, r3, #5
 8004504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004508:	0150      	lsls	r0, r2, #5
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	ebb2 080a 	subs.w	r8, r2, sl
 8004512:	eb63 090b 	sbc.w	r9, r3, fp
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004522:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004526:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800452a:	ebb2 0408 	subs.w	r4, r2, r8
 800452e:	eb63 0509 	sbc.w	r5, r3, r9
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	00eb      	lsls	r3, r5, #3
 800453c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004540:	00e2      	lsls	r2, r4, #3
 8004542:	4614      	mov	r4, r2
 8004544:	461d      	mov	r5, r3
 8004546:	eb14 030a 	adds.w	r3, r4, sl
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	eb45 030b 	adc.w	r3, r5, fp
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455e:	4629      	mov	r1, r5
 8004560:	028b      	lsls	r3, r1, #10
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004568:	4621      	mov	r1, r4
 800456a:	028a      	lsls	r2, r1, #10
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	2200      	movs	r2, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	60fa      	str	r2, [r7, #12]
 8004578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800457c:	f7fb fe80 	bl	8000280 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetSysClockFreq+0x184>)
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3740      	adds	r7, #64	; 0x40
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	017d7840 	.word	0x017d7840

080045c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000004 	.word	0x20000004

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	08007810 	.word	0x08007810

08004604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004608:	f7ff ffdc 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	0b5b      	lsrs	r3, r3, #13
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	08007810 	.word	0x08007810

0800462c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e041      	b.n	80046c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd fd08 	bl	8002068 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 fad4 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x24>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e022      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x3e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e015      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x58>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e008      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e068      	b.n	8004810 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0x82>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x92>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fc56 	bl	8005030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a23      	ldr	r2, [pc, #140]	; (8004818 <HAL_TIM_PWM_Start+0x14c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d107      	bne.n	800479e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_TIM_PWM_Start+0x14c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d013      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_TIM_PWM_Start+0x150>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_TIM_PWM_Start+0x154>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <HAL_TIM_PWM_Start+0x158>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <HAL_TIM_PWM_Start+0x15c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d111      	bne.n	80047fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d010      	beq.n	800480e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	e007      	b.n	800480e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40014000 	.word	0x40014000

0800482c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e097      	b.n	8004970 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fd fc53 	bl	8002100 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004870:	f023 0307 	bic.w	r3, r3, #7
 8004874:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f000 f9c9 	bl	8004c18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	4313      	orrs	r3, r2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048cc:	f023 030c 	bic.w	r3, r3, #12
 80048d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	4313      	orrs	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	011a      	lsls	r2, r3, #4
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	031b      	lsls	r3, r3, #12
 80048fc:	4313      	orrs	r3, r2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4313      	orrs	r3, r2
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004988:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004990:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004998:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d110      	bne.n	80049ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d102      	bne.n	80049b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049ae:	7b7b      	ldrb	r3, [r7, #13]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e069      	b.n	8004a8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c8:	e031      	b.n	8004a2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d110      	bne.n	80049f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d0:	7bbb      	ldrb	r3, [r7, #14]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049d6:	7b3b      	ldrb	r3, [r7, #12]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e055      	b.n	8004a8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049f0:	e01d      	b.n	8004a2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d108      	bne.n	8004a0a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049fe:	7b7b      	ldrb	r3, [r7, #13]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d102      	bne.n	8004a0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a04:	7b3b      	ldrb	r3, [r7, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e03e      	b.n	8004a8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_Encoder_Start+0xc4>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d008      	beq.n	8004a4c <HAL_TIM_Encoder_Start+0xd4>
 8004a3a:	e00f      	b.n	8004a5c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 faf3 	bl	8005030 <TIM_CCxChannelCmd>
      break;
 8004a4a:	e016      	b.n	8004a7a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2201      	movs	r2, #1
 8004a52:	2104      	movs	r1, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 faeb 	bl	8005030 <TIM_CCxChannelCmd>
      break;
 8004a5a:	e00e      	b.n	8004a7a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fae3 	bl	8005030 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	2104      	movs	r1, #4
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fadc 	bl	8005030 <TIM_CCxChannelCmd>
      break;
 8004a78:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0ae      	b.n	8004c10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	f200 809f 	bhi.w	8004c00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004c01 	.word	0x08004c01
 8004ad0:	08004c01 	.word	0x08004c01
 8004ad4:	08004c01 	.word	0x08004c01
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004c01 	.word	0x08004c01
 8004ae0:	08004c01 	.word	0x08004c01
 8004ae4:	08004c01 	.word	0x08004c01
 8004ae8:	08004b7f 	.word	0x08004b7f
 8004aec:	08004c01 	.word	0x08004c01
 8004af0:	08004c01 	.word	0x08004c01
 8004af4:	08004c01 	.word	0x08004c01
 8004af8:	08004bbf 	.word	0x08004bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f908 	bl	8004d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0208 	orr.w	r2, r2, #8
 8004b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0204 	bic.w	r2, r2, #4
 8004b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6999      	ldr	r1, [r3, #24]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	619a      	str	r2, [r3, #24]
      break;
 8004b3a:	e064      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f94e 	bl	8004de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	619a      	str	r2, [r3, #24]
      break;
 8004b7c:	e043      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f999 	bl	8004ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0208 	orr.w	r2, r2, #8
 8004b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0204 	bic.w	r2, r2, #4
 8004ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	61da      	str	r2, [r3, #28]
      break;
 8004bbc:	e023      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f9e3 	bl	8004f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	61da      	str	r2, [r3, #28]
      break;
 8004bfe:	e002      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
      break;
 8004c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a34      	ldr	r2, [pc, #208]	; (8004cfc <TIM_Base_SetConfig+0xe4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00b      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a31      	ldr	r2, [pc, #196]	; (8004d00 <TIM_Base_SetConfig+0xe8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <TIM_Base_SetConfig+0xec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_Base_SetConfig+0x38>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <TIM_Base_SetConfig+0xf0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d108      	bne.n	8004c62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a25      	ldr	r2, [pc, #148]	; (8004cfc <TIM_Base_SetConfig+0xe4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d017      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <TIM_Base_SetConfig+0xe8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <TIM_Base_SetConfig+0xec>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <TIM_Base_SetConfig+0xf0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <TIM_Base_SetConfig+0xf4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <TIM_Base_SetConfig+0xf8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0x8a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <TIM_Base_SetConfig+0xfc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <TIM_Base_SetConfig+0xe4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d103      	bne.n	8004ce8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	615a      	str	r2, [r3, #20]
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800

08004d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 0302 	bic.w	r3, r3, #2
 8004d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <TIM_OC1_SetConfig+0xc8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d10c      	bne.n	8004d8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0308 	bic.w	r3, r3, #8
 8004d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <TIM_OC1_SetConfig+0xc8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d111      	bne.n	8004dba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f023 0210 	bic.w	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0320 	bic.w	r3, r3, #32
 8004e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <TIM_OC2_SetConfig+0xd4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10d      	bne.n	8004e60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <TIM_OC2_SetConfig+0xd4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000

08004ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <TIM_OC3_SetConfig+0xd0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d10d      	bne.n	8004f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <TIM_OC3_SetConfig+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d113      	bne.n	8004f66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40010000 	.word	0x40010000

08004f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <TIM_OC4_SetConfig+0x9c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d109      	bne.n	8005004 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	019b      	lsls	r3, r3, #6
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000

08005030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2201      	movs	r2, #1
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1a      	ldr	r2, [r3, #32]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	43db      	mvns	r3, r3
 8005052:	401a      	ands	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e050      	b.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d013      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10c      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40014000 	.word	0x40014000

08005158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005170:	2302      	movs	r3, #2
 8005172:	e03d      	b.n	80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e03f      	b.n	800528e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fd f86e 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2224      	movs	r2, #36	; 0x24
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800523e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fde9 	bl	8005e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695a      	ldr	r2, [r3, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b08a      	sub	sp, #40	; 0x28
 800529a:	af02      	add	r7, sp, #8
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d17c      	bne.n	80053b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_UART_Transmit+0x2c>
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e075      	b.n	80053b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_UART_Transmit+0x3e>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e06e      	b.n	80053b2 <HAL_UART_Transmit+0x11c>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2221      	movs	r2, #33	; 0x21
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ea:	f7fd fa17 	bl	800271c <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	88fa      	ldrh	r2, [r7, #6]
 80052fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	d108      	bne.n	8005318 <HAL_UART_Transmit+0x82>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e003      	b.n	8005320 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005328:	e02a      	b.n	8005380 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2200      	movs	r2, #0
 8005332:	2180      	movs	r1, #128	; 0x80
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 fb29 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e036      	b.n	80053b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3302      	adds	r3, #2
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e007      	b.n	8005372 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	3301      	adds	r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1cf      	bne.n	800532a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 faf9 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e006      	b.n	80053b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	4613      	mov	r3, r2
 80053c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d11d      	bne.n	8005410 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_UART_Receive_IT+0x26>
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e016      	b.n	8005412 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Receive_IT+0x38>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e00f      	b.n	8005412 <HAL_UART_Receive_IT+0x58>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	461a      	mov	r2, r3
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fb2e 	bl	8005a68 <UART_Start_Receive_IT>
 800540c:	4603      	mov	r3, r0
 800540e:	e000      	b.n	8005412 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0ba      	sub	sp, #232	; 0xe8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800545a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_UART_IRQHandler+0x66>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fc11 	bl	8005ca2 <UART_Receive_IT>
      return;
 8005480:	e256      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80de 	beq.w	8005648 <HAL_UART_IRQHandler+0x22c>
 800548c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80d1 	beq.w	8005648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_UART_IRQHandler+0xae>
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_UART_IRQHandler+0xd2>
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0202 	orr.w	r2, r3, #2
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <HAL_UART_IRQHandler+0xf6>
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0204 	orr.w	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_UART_IRQHandler+0x126>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800552a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 81ed 	beq.w	8005926 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_UART_IRQHandler+0x14e>
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb9c 	bl	8005ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_UART_IRQHandler+0x17a>
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d04f      	beq.n	8005636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 faa4 	bl	8005ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d141      	bne.n	800562e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1d9      	bne.n	80055aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d013      	beq.n	8005626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	4a7d      	ldr	r2, [pc, #500]	; (80057f8 <HAL_UART_IRQHandler+0x3dc>)
 8005604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd fa37 	bl	8002a7e <HAL_DMA_Abort_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	e00e      	b.n	8005644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f99a 	bl	8005960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562c:	e00a      	b.n	8005644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f996 	bl	8005960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	e006      	b.n	8005644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f992 	bl	8005960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005642:	e170      	b.n	8005926 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	bf00      	nop
    return;
 8005646:	e16e      	b.n	8005926 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	f040 814a 	bne.w	80058e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8143 	beq.w	80058e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 813c 	beq.w	80058e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	f040 80b4 	bne.w	80057fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8140 	beq.w	800592a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056b2:	429a      	cmp	r2, r3
 80056b4:	f080 8139 	bcs.w	800592a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	f000 8088 	beq.w	80057de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1d9      	bne.n	80056ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800572a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800573e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e1      	bne.n	800571a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800576c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800577a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800577c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e3      	bne.n	8005756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	f023 0310 	bic.w	r3, r3, #16
 80057b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80057c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e3      	bne.n	800579c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fd f8e0 	bl	800299e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8c0 	bl	8005974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057f4:	e099      	b.n	800592a <HAL_UART_IRQHandler+0x50e>
 80057f6:	bf00      	nop
 80057f8:	08005bab 	.word	0x08005bab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005804:	b29b      	uxth	r3, r3
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 808b 	beq.w	800592e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8086 	beq.w	800592e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005846:	647a      	str	r2, [r7, #68]	; 0x44
 8005848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800584c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e3      	bne.n	8005822 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	623b      	str	r3, [r7, #32]
   return(result);
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800587e:	633a      	str	r2, [r7, #48]	; 0x30
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e3      	bne.n	800585a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058c4:	61fa      	str	r2, [r7, #28]
 80058c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	617b      	str	r3, [r7, #20]
   return(result);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e3      	bne.n	80058a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f848 	bl	8005974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e4:	e023      	b.n	800592e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_UART_IRQHandler+0x4ea>
 80058f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f967 	bl	8005bd2 <UART_Transmit_IT>
    return;
 8005904:	e014      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <HAL_UART_IRQHandler+0x514>
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9a7 	bl	8005c72 <UART_EndTransmit_IT>
    return;
 8005924:	e004      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
    return;
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
      return;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <HAL_UART_IRQHandler+0x514>
      return;
 800592e:	bf00      	nop
  }
}
 8005930:	37e8      	adds	r7, #232	; 0xe8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop

08005938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b090      	sub	sp, #64	; 0x40
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599c:	e050      	b.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a4:	d04c      	beq.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
 80059ac:	f7fc feb6 	bl	800271c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d241      	bcs.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059dc:	637a      	str	r2, [r7, #52]	; 0x34
 80059de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a10:	623a      	str	r2, [r7, #32]
 8005a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	69f9      	ldr	r1, [r7, #28]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e5      	bne.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e00f      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d09f      	beq.n	800599e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3740      	adds	r7, #64	; 0x40
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2222      	movs	r2, #34	; 0x22
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0220 	orr.w	r2, r2, #32
 8005ad4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b095      	sub	sp, #84	; 0x54
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b0c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e5      	bne.n	8005b20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d119      	bne.n	8005b90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	647b      	str	r3, [r7, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7c:	61ba      	str	r2, [r7, #24]
 8005b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b9e:	bf00      	nop
 8005ba0:	3754      	adds	r7, #84	; 0x54
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fecb 	bl	8005960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b21      	cmp	r3, #33	; 0x21
 8005be4:	d13e      	bne.n	8005c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bee:	d114      	bne.n	8005c1a <UART_Transmit_IT+0x48>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d110      	bne.n	8005c1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]
 8005c18:	e008      	b.n	8005c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6211      	str	r1, [r2, #32]
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10f      	bne.n	8005c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fe50 	bl	8005938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b08c      	sub	sp, #48	; 0x30
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b22      	cmp	r3, #34	; 0x22
 8005cb4:	f040 80ab 	bne.w	8005e0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d117      	bne.n	8005cf2 <UART_Receive_IT+0x50>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d113      	bne.n	8005cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf0:	e026      	b.n	8005d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d007      	beq.n	8005d16 <UART_Receive_IT+0x74>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <UART_Receive_IT+0x82>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e008      	b.n	8005d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d15a      	bne.n	8005e0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0220 	bic.w	r2, r2, #32
 8005d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d135      	bne.n	8005e00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	613b      	str	r3, [r7, #16]
   return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f023 0310 	bic.w	r3, r3, #16
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	623a      	str	r2, [r7, #32]
 8005dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	69f9      	ldr	r1, [r7, #28]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e5      	bne.n	8005d9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d10a      	bne.n	8005df2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fdbb 	bl	8005974 <HAL_UARTEx_RxEventCallback>
 8005dfe:	e002      	b.n	8005e06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fda3 	bl	800594c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e002      	b.n	8005e10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e000      	b.n	8005e10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3730      	adds	r7, #48	; 0x30
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b0c0      	sub	sp, #256	; 0x100
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	68d9      	ldr	r1, [r3, #12]
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	ea40 0301 	orr.w	r3, r0, r1
 8005e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e70:	f021 010c 	bic.w	r1, r1, #12
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e92:	6999      	ldr	r1, [r3, #24]
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	ea40 0301 	orr.w	r3, r0, r1
 8005e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b8f      	ldr	r3, [pc, #572]	; (80060e4 <UART_SetConfig+0x2cc>)
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d005      	beq.n	8005eb8 <UART_SetConfig+0xa0>
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b8d      	ldr	r3, [pc, #564]	; (80060e8 <UART_SetConfig+0x2d0>)
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d104      	bne.n	8005ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb8:	f7fe fba4 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 8005ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ec0:	e003      	b.n	8005eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7fe fb8b 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8005ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	f040 810c 	bne.w	80060f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eea:	4622      	mov	r2, r4
 8005eec:	462b      	mov	r3, r5
 8005eee:	1891      	adds	r1, r2, r2
 8005ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ef2:	415b      	adcs	r3, r3
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005efa:	4621      	mov	r1, r4
 8005efc:	eb12 0801 	adds.w	r8, r2, r1
 8005f00:	4629      	mov	r1, r5
 8005f02:	eb43 0901 	adc.w	r9, r3, r1
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f1a:	4690      	mov	r8, r2
 8005f1c:	4699      	mov	r9, r3
 8005f1e:	4623      	mov	r3, r4
 8005f20:	eb18 0303 	adds.w	r3, r8, r3
 8005f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f28:	462b      	mov	r3, r5
 8005f2a:	eb49 0303 	adc.w	r3, r9, r3
 8005f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f46:	460b      	mov	r3, r1
 8005f48:	18db      	adds	r3, r3, r3
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	eb42 0303 	adc.w	r3, r2, r3
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
 8005f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f5c:	f7fa f990 	bl	8000280 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b61      	ldr	r3, [pc, #388]	; (80060ec <UART_SetConfig+0x2d4>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011c      	lsls	r4, r3, #4
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f90:	4641      	mov	r1, r8
 8005f92:	eb12 0a01 	adds.w	sl, r2, r1
 8005f96:	4649      	mov	r1, r9
 8005f98:	eb43 0b01 	adc.w	fp, r3, r1
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb0:	4692      	mov	sl, r2
 8005fb2:	469b      	mov	fp, r3
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	18db      	adds	r3, r3, r3
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ff2:	f7fa f945 	bl	8000280 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <UART_SetConfig+0x2d4>)
 8005ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2264      	movs	r2, #100	; 0x64
 8006006:	fb02 f303 	mul.w	r3, r2, r3
 800600a:	1acb      	subs	r3, r1, r3
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006012:	4b36      	ldr	r3, [pc, #216]	; (80060ec <UART_SetConfig+0x2d4>)
 8006014:	fba3 2302 	umull	r2, r3, r3, r2
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006020:	441c      	add	r4, r3
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800602c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	63b9      	str	r1, [r7, #56]	; 0x38
 800603c:	415b      	adcs	r3, r3
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6339      	str	r1, [r7, #48]	; 0x30
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006078:	464b      	mov	r3, r9
 800607a:	460a      	mov	r2, r1
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006098:	460b      	mov	r3, r1
 800609a:	18db      	adds	r3, r3, r3
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
 800609e:	4613      	mov	r3, r2
 80060a0:	eb42 0303 	adc.w	r3, r2, r3
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060ae:	f7fa f8e7 	bl	8000280 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <UART_SetConfig+0x2d4>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a08      	ldr	r2, [pc, #32]	; (80060ec <UART_SetConfig+0x2d4>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 0207 	and.w	r2, r3, #7
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4422      	add	r2, r4
 80060de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060e0:	e105      	b.n	80062ee <UART_SetConfig+0x4d6>
 80060e2:	bf00      	nop
 80060e4:	40011000 	.word	0x40011000
 80060e8:	40011400 	.word	0x40011400
 80060ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006102:	4642      	mov	r2, r8
 8006104:	464b      	mov	r3, r9
 8006106:	1891      	adds	r1, r2, r2
 8006108:	6239      	str	r1, [r7, #32]
 800610a:	415b      	adcs	r3, r3
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
 800610e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006112:	4641      	mov	r1, r8
 8006114:	1854      	adds	r4, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb43 0501 	adc.w	r5, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	00eb      	lsls	r3, r5, #3
 8006126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612a:	00e2      	lsls	r2, r4, #3
 800612c:	4614      	mov	r4, r2
 800612e:	461d      	mov	r5, r3
 8006130:	4643      	mov	r3, r8
 8006132:	18e3      	adds	r3, r4, r3
 8006134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006138:	464b      	mov	r3, r9
 800613a:	eb45 0303 	adc.w	r3, r5, r3
 800613e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800614e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800615e:	4629      	mov	r1, r5
 8006160:	008b      	lsls	r3, r1, #2
 8006162:	4621      	mov	r1, r4
 8006164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006168:	4621      	mov	r1, r4
 800616a:	008a      	lsls	r2, r1, #2
 800616c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006170:	f7fa f886 	bl	8000280 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4b60      	ldr	r3, [pc, #384]	; (80062fc <UART_SetConfig+0x4e4>)
 800617a:	fba3 2302 	umull	r2, r3, r3, r2
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	011c      	lsls	r4, r3, #4
 8006182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006186:	2200      	movs	r2, #0
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	1891      	adds	r1, r2, r2
 800619a:	61b9      	str	r1, [r7, #24]
 800619c:	415b      	adcs	r3, r3
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a4:	4641      	mov	r1, r8
 80061a6:	1851      	adds	r1, r2, r1
 80061a8:	6139      	str	r1, [r7, #16]
 80061aa:	4649      	mov	r1, r9
 80061ac:	414b      	adcs	r3, r1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061bc:	4659      	mov	r1, fp
 80061be:	00cb      	lsls	r3, r1, #3
 80061c0:	4651      	mov	r1, sl
 80061c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c6:	4651      	mov	r1, sl
 80061c8:	00ca      	lsls	r2, r1, #3
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	4642      	mov	r2, r8
 80061d2:	189b      	adds	r3, r3, r2
 80061d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061d8:	464b      	mov	r3, r9
 80061da:	460a      	mov	r2, r1
 80061dc:	eb42 0303 	adc.w	r3, r2, r3
 80061e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061fc:	4649      	mov	r1, r9
 80061fe:	008b      	lsls	r3, r1, #2
 8006200:	4641      	mov	r1, r8
 8006202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006206:	4641      	mov	r1, r8
 8006208:	008a      	lsls	r2, r1, #2
 800620a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800620e:	f7fa f837 	bl	8000280 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4b39      	ldr	r3, [pc, #228]	; (80062fc <UART_SetConfig+0x4e4>)
 8006218:	fba3 1302 	umull	r1, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	2164      	movs	r1, #100	; 0x64
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	3332      	adds	r3, #50	; 0x32
 800622a:	4a34      	ldr	r2, [pc, #208]	; (80062fc <UART_SetConfig+0x4e4>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006236:	441c      	add	r4, r3
 8006238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623c:	2200      	movs	r2, #0
 800623e:	673b      	str	r3, [r7, #112]	; 0x70
 8006240:	677a      	str	r2, [r7, #116]	; 0x74
 8006242:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006246:	4642      	mov	r2, r8
 8006248:	464b      	mov	r3, r9
 800624a:	1891      	adds	r1, r2, r2
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	415b      	adcs	r3, r3
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006256:	4641      	mov	r1, r8
 8006258:	1851      	adds	r1, r2, r1
 800625a:	6039      	str	r1, [r7, #0]
 800625c:	4649      	mov	r1, r9
 800625e:	414b      	adcs	r3, r1
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800626e:	4659      	mov	r1, fp
 8006270:	00cb      	lsls	r3, r1, #3
 8006272:	4651      	mov	r1, sl
 8006274:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006278:	4651      	mov	r1, sl
 800627a:	00ca      	lsls	r2, r1, #3
 800627c:	4610      	mov	r0, r2
 800627e:	4619      	mov	r1, r3
 8006280:	4603      	mov	r3, r0
 8006282:	4642      	mov	r2, r8
 8006284:	189b      	adds	r3, r3, r2
 8006286:	66bb      	str	r3, [r7, #104]	; 0x68
 8006288:	464b      	mov	r3, r9
 800628a:	460a      	mov	r2, r1
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	663b      	str	r3, [r7, #96]	; 0x60
 800629c:	667a      	str	r2, [r7, #100]	; 0x64
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062aa:	4649      	mov	r1, r9
 80062ac:	008b      	lsls	r3, r1, #2
 80062ae:	4641      	mov	r1, r8
 80062b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b4:	4641      	mov	r1, r8
 80062b6:	008a      	lsls	r2, r1, #2
 80062b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062bc:	f7f9 ffe0 	bl	8000280 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <UART_SetConfig+0x4e4>)
 80062c6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	2164      	movs	r1, #100	; 0x64
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	3332      	adds	r3, #50	; 0x32
 80062d8:	4a08      	ldr	r2, [pc, #32]	; (80062fc <UART_SetConfig+0x4e4>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4422      	add	r2, r4
 80062ec:	609a      	str	r2, [r3, #8]
}
 80062ee:	bf00      	nop
 80062f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062f4:	46bd      	mov	sp, r7
 80062f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fa:	bf00      	nop
 80062fc:	51eb851f 	.word	0x51eb851f

08006300 <_Znaj>:
 8006300:	f000 b800 	b.w	8006304 <_Znwj>

08006304 <_Znwj>:
 8006304:	2801      	cmp	r0, #1
 8006306:	bf38      	it	cc
 8006308:	2001      	movcc	r0, #1
 800630a:	b510      	push	{r4, lr}
 800630c:	4604      	mov	r4, r0
 800630e:	4620      	mov	r0, r4
 8006310:	f000 f844 	bl	800639c <malloc>
 8006314:	b930      	cbnz	r0, 8006324 <_Znwj+0x20>
 8006316:	f000 f807 	bl	8006328 <_ZSt15get_new_handlerv>
 800631a:	b908      	cbnz	r0, 8006320 <_Znwj+0x1c>
 800631c:	f000 f80c 	bl	8006338 <abort>
 8006320:	4780      	blx	r0
 8006322:	e7f4      	b.n	800630e <_Znwj+0xa>
 8006324:	bd10      	pop	{r4, pc}
	...

08006328 <_ZSt15get_new_handlerv>:
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <_ZSt15get_new_handlerv+0xc>)
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	f3bf 8f5b 	dmb	ish
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	2000029c 	.word	0x2000029c

08006338 <abort>:
 8006338:	b508      	push	{r3, lr}
 800633a:	2006      	movs	r0, #6
 800633c:	f000 f96e 	bl	800661c <raise>
 8006340:	2001      	movs	r0, #1
 8006342:	f7fc f89b 	bl	800247c <_exit>
	...

08006348 <__errno>:
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <__errno+0x8>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000010 	.word	0x20000010

08006354 <__libc_init_array>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4d0d      	ldr	r5, [pc, #52]	; (800638c <__libc_init_array+0x38>)
 8006358:	4c0d      	ldr	r4, [pc, #52]	; (8006390 <__libc_init_array+0x3c>)
 800635a:	1b64      	subs	r4, r4, r5
 800635c:	10a4      	asrs	r4, r4, #2
 800635e:	2600      	movs	r6, #0
 8006360:	42a6      	cmp	r6, r4
 8006362:	d109      	bne.n	8006378 <__libc_init_array+0x24>
 8006364:	4d0b      	ldr	r5, [pc, #44]	; (8006394 <__libc_init_array+0x40>)
 8006366:	4c0c      	ldr	r4, [pc, #48]	; (8006398 <__libc_init_array+0x44>)
 8006368:	f001 f9d6 	bl	8007718 <_init>
 800636c:	1b64      	subs	r4, r4, r5
 800636e:	10a4      	asrs	r4, r4, #2
 8006370:	2600      	movs	r6, #0
 8006372:	42a6      	cmp	r6, r4
 8006374:	d105      	bne.n	8006382 <__libc_init_array+0x2e>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f855 3b04 	ldr.w	r3, [r5], #4
 800637c:	4798      	blx	r3
 800637e:	3601      	adds	r6, #1
 8006380:	e7ee      	b.n	8006360 <__libc_init_array+0xc>
 8006382:	f855 3b04 	ldr.w	r3, [r5], #4
 8006386:	4798      	blx	r3
 8006388:	3601      	adds	r6, #1
 800638a:	e7f2      	b.n	8006372 <__libc_init_array+0x1e>
 800638c:	080078b8 	.word	0x080078b8
 8006390:	080078b8 	.word	0x080078b8
 8006394:	080078b8 	.word	0x080078b8
 8006398:	080078bc 	.word	0x080078bc

0800639c <malloc>:
 800639c:	4b02      	ldr	r3, [pc, #8]	; (80063a8 <malloc+0xc>)
 800639e:	4601      	mov	r1, r0
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	f000 b877 	b.w	8006494 <_malloc_r>
 80063a6:	bf00      	nop
 80063a8:	20000010 	.word	0x20000010

080063ac <memset>:
 80063ac:	4402      	add	r2, r0
 80063ae:	4603      	mov	r3, r0
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d100      	bne.n	80063b6 <memset+0xa>
 80063b4:	4770      	bx	lr
 80063b6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ba:	e7f9      	b.n	80063b0 <memset+0x4>

080063bc <_free_r>:
 80063bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063be:	2900      	cmp	r1, #0
 80063c0:	d044      	beq.n	800644c <_free_r+0x90>
 80063c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c6:	9001      	str	r0, [sp, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f1a1 0404 	sub.w	r4, r1, #4
 80063ce:	bfb8      	it	lt
 80063d0:	18e4      	addlt	r4, r4, r3
 80063d2:	f000 fa57 	bl	8006884 <__malloc_lock>
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <_free_r+0x94>)
 80063d8:	9801      	ldr	r0, [sp, #4]
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	b933      	cbnz	r3, 80063ec <_free_r+0x30>
 80063de:	6063      	str	r3, [r4, #4]
 80063e0:	6014      	str	r4, [r2, #0]
 80063e2:	b003      	add	sp, #12
 80063e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063e8:	f000 ba52 	b.w	8006890 <__malloc_unlock>
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d908      	bls.n	8006402 <_free_r+0x46>
 80063f0:	6825      	ldr	r5, [r4, #0]
 80063f2:	1961      	adds	r1, r4, r5
 80063f4:	428b      	cmp	r3, r1
 80063f6:	bf01      	itttt	eq
 80063f8:	6819      	ldreq	r1, [r3, #0]
 80063fa:	685b      	ldreq	r3, [r3, #4]
 80063fc:	1949      	addeq	r1, r1, r5
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	e7ed      	b.n	80063de <_free_r+0x22>
 8006402:	461a      	mov	r2, r3
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b10b      	cbz	r3, 800640c <_free_r+0x50>
 8006408:	42a3      	cmp	r3, r4
 800640a:	d9fa      	bls.n	8006402 <_free_r+0x46>
 800640c:	6811      	ldr	r1, [r2, #0]
 800640e:	1855      	adds	r5, r2, r1
 8006410:	42a5      	cmp	r5, r4
 8006412:	d10b      	bne.n	800642c <_free_r+0x70>
 8006414:	6824      	ldr	r4, [r4, #0]
 8006416:	4421      	add	r1, r4
 8006418:	1854      	adds	r4, r2, r1
 800641a:	42a3      	cmp	r3, r4
 800641c:	6011      	str	r1, [r2, #0]
 800641e:	d1e0      	bne.n	80063e2 <_free_r+0x26>
 8006420:	681c      	ldr	r4, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	6053      	str	r3, [r2, #4]
 8006426:	4421      	add	r1, r4
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	e7da      	b.n	80063e2 <_free_r+0x26>
 800642c:	d902      	bls.n	8006434 <_free_r+0x78>
 800642e:	230c      	movs	r3, #12
 8006430:	6003      	str	r3, [r0, #0]
 8006432:	e7d6      	b.n	80063e2 <_free_r+0x26>
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	1961      	adds	r1, r4, r5
 8006438:	428b      	cmp	r3, r1
 800643a:	bf04      	itt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	bf04      	itt	eq
 8006444:	1949      	addeq	r1, r1, r5
 8006446:	6021      	streq	r1, [r4, #0]
 8006448:	6054      	str	r4, [r2, #4]
 800644a:	e7ca      	b.n	80063e2 <_free_r+0x26>
 800644c:	b003      	add	sp, #12
 800644e:	bd30      	pop	{r4, r5, pc}
 8006450:	200002a0 	.word	0x200002a0

08006454 <sbrk_aligned>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4e0e      	ldr	r6, [pc, #56]	; (8006490 <sbrk_aligned+0x3c>)
 8006458:	460c      	mov	r4, r1
 800645a:	6831      	ldr	r1, [r6, #0]
 800645c:	4605      	mov	r5, r0
 800645e:	b911      	cbnz	r1, 8006466 <sbrk_aligned+0x12>
 8006460:	f000 f8a4 	bl	80065ac <_sbrk_r>
 8006464:	6030      	str	r0, [r6, #0]
 8006466:	4621      	mov	r1, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f000 f89f 	bl	80065ac <_sbrk_r>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	d00a      	beq.n	8006488 <sbrk_aligned+0x34>
 8006472:	1cc4      	adds	r4, r0, #3
 8006474:	f024 0403 	bic.w	r4, r4, #3
 8006478:	42a0      	cmp	r0, r4
 800647a:	d007      	beq.n	800648c <sbrk_aligned+0x38>
 800647c:	1a21      	subs	r1, r4, r0
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f894 	bl	80065ac <_sbrk_r>
 8006484:	3001      	adds	r0, #1
 8006486:	d101      	bne.n	800648c <sbrk_aligned+0x38>
 8006488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800648c:	4620      	mov	r0, r4
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	200002a4 	.word	0x200002a4

08006494 <_malloc_r>:
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	1ccd      	adds	r5, r1, #3
 800649a:	f025 0503 	bic.w	r5, r5, #3
 800649e:	3508      	adds	r5, #8
 80064a0:	2d0c      	cmp	r5, #12
 80064a2:	bf38      	it	cc
 80064a4:	250c      	movcc	r5, #12
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	4607      	mov	r7, r0
 80064aa:	db01      	blt.n	80064b0 <_malloc_r+0x1c>
 80064ac:	42a9      	cmp	r1, r5
 80064ae:	d905      	bls.n	80064bc <_malloc_r+0x28>
 80064b0:	230c      	movs	r3, #12
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	2600      	movs	r6, #0
 80064b6:	4630      	mov	r0, r6
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064bc:	4e2e      	ldr	r6, [pc, #184]	; (8006578 <_malloc_r+0xe4>)
 80064be:	f000 f9e1 	bl	8006884 <__malloc_lock>
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	461c      	mov	r4, r3
 80064c6:	bb34      	cbnz	r4, 8006516 <_malloc_r+0x82>
 80064c8:	4629      	mov	r1, r5
 80064ca:	4638      	mov	r0, r7
 80064cc:	f7ff ffc2 	bl	8006454 <sbrk_aligned>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	4604      	mov	r4, r0
 80064d4:	d14d      	bne.n	8006572 <_malloc_r+0xde>
 80064d6:	6834      	ldr	r4, [r6, #0]
 80064d8:	4626      	mov	r6, r4
 80064da:	2e00      	cmp	r6, #0
 80064dc:	d140      	bne.n	8006560 <_malloc_r+0xcc>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	4631      	mov	r1, r6
 80064e2:	4638      	mov	r0, r7
 80064e4:	eb04 0803 	add.w	r8, r4, r3
 80064e8:	f000 f860 	bl	80065ac <_sbrk_r>
 80064ec:	4580      	cmp	r8, r0
 80064ee:	d13a      	bne.n	8006566 <_malloc_r+0xd2>
 80064f0:	6821      	ldr	r1, [r4, #0]
 80064f2:	3503      	adds	r5, #3
 80064f4:	1a6d      	subs	r5, r5, r1
 80064f6:	f025 0503 	bic.w	r5, r5, #3
 80064fa:	3508      	adds	r5, #8
 80064fc:	2d0c      	cmp	r5, #12
 80064fe:	bf38      	it	cc
 8006500:	250c      	movcc	r5, #12
 8006502:	4629      	mov	r1, r5
 8006504:	4638      	mov	r0, r7
 8006506:	f7ff ffa5 	bl	8006454 <sbrk_aligned>
 800650a:	3001      	adds	r0, #1
 800650c:	d02b      	beq.n	8006566 <_malloc_r+0xd2>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	442b      	add	r3, r5
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	e00e      	b.n	8006534 <_malloc_r+0xa0>
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	1b52      	subs	r2, r2, r5
 800651a:	d41e      	bmi.n	800655a <_malloc_r+0xc6>
 800651c:	2a0b      	cmp	r2, #11
 800651e:	d916      	bls.n	800654e <_malloc_r+0xba>
 8006520:	1961      	adds	r1, r4, r5
 8006522:	42a3      	cmp	r3, r4
 8006524:	6025      	str	r5, [r4, #0]
 8006526:	bf18      	it	ne
 8006528:	6059      	strne	r1, [r3, #4]
 800652a:	6863      	ldr	r3, [r4, #4]
 800652c:	bf08      	it	eq
 800652e:	6031      	streq	r1, [r6, #0]
 8006530:	5162      	str	r2, [r4, r5]
 8006532:	604b      	str	r3, [r1, #4]
 8006534:	4638      	mov	r0, r7
 8006536:	f104 060b 	add.w	r6, r4, #11
 800653a:	f000 f9a9 	bl	8006890 <__malloc_unlock>
 800653e:	f026 0607 	bic.w	r6, r6, #7
 8006542:	1d23      	adds	r3, r4, #4
 8006544:	1af2      	subs	r2, r6, r3
 8006546:	d0b6      	beq.n	80064b6 <_malloc_r+0x22>
 8006548:	1b9b      	subs	r3, r3, r6
 800654a:	50a3      	str	r3, [r4, r2]
 800654c:	e7b3      	b.n	80064b6 <_malloc_r+0x22>
 800654e:	6862      	ldr	r2, [r4, #4]
 8006550:	42a3      	cmp	r3, r4
 8006552:	bf0c      	ite	eq
 8006554:	6032      	streq	r2, [r6, #0]
 8006556:	605a      	strne	r2, [r3, #4]
 8006558:	e7ec      	b.n	8006534 <_malloc_r+0xa0>
 800655a:	4623      	mov	r3, r4
 800655c:	6864      	ldr	r4, [r4, #4]
 800655e:	e7b2      	b.n	80064c6 <_malloc_r+0x32>
 8006560:	4634      	mov	r4, r6
 8006562:	6876      	ldr	r6, [r6, #4]
 8006564:	e7b9      	b.n	80064da <_malloc_r+0x46>
 8006566:	230c      	movs	r3, #12
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	4638      	mov	r0, r7
 800656c:	f000 f990 	bl	8006890 <__malloc_unlock>
 8006570:	e7a1      	b.n	80064b6 <_malloc_r+0x22>
 8006572:	6025      	str	r5, [r4, #0]
 8006574:	e7de      	b.n	8006534 <_malloc_r+0xa0>
 8006576:	bf00      	nop
 8006578:	200002a0 	.word	0x200002a0

0800657c <iprintf>:
 800657c:	b40f      	push	{r0, r1, r2, r3}
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <iprintf+0x2c>)
 8006580:	b513      	push	{r0, r1, r4, lr}
 8006582:	681c      	ldr	r4, [r3, #0]
 8006584:	b124      	cbz	r4, 8006590 <iprintf+0x14>
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	b913      	cbnz	r3, 8006590 <iprintf+0x14>
 800658a:	4620      	mov	r0, r4
 800658c:	f000 f8da 	bl	8006744 <__sinit>
 8006590:	ab05      	add	r3, sp, #20
 8006592:	9a04      	ldr	r2, [sp, #16]
 8006594:	68a1      	ldr	r1, [r4, #8]
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fb05 	bl	8006ba8 <_vfiprintf_r>
 800659e:	b002      	add	sp, #8
 80065a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a4:	b004      	add	sp, #16
 80065a6:	4770      	bx	lr
 80065a8:	20000010 	.word	0x20000010

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	; (80065c8 <_sbrk_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb ffd8 	bl	800256c <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	200002ac 	.word	0x200002ac

080065cc <_raise_r>:
 80065cc:	291f      	cmp	r1, #31
 80065ce:	b538      	push	{r3, r4, r5, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	460d      	mov	r5, r1
 80065d4:	d904      	bls.n	80065e0 <_raise_r+0x14>
 80065d6:	2316      	movs	r3, #22
 80065d8:	6003      	str	r3, [r0, #0]
 80065da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065e2:	b112      	cbz	r2, 80065ea <_raise_r+0x1e>
 80065e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065e8:	b94b      	cbnz	r3, 80065fe <_raise_r+0x32>
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f830 	bl	8006650 <_getpid_r>
 80065f0:	462a      	mov	r2, r5
 80065f2:	4601      	mov	r1, r0
 80065f4:	4620      	mov	r0, r4
 80065f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065fa:	f000 b817 	b.w	800662c <_kill_r>
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d00a      	beq.n	8006618 <_raise_r+0x4c>
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	d103      	bne.n	800660e <_raise_r+0x42>
 8006606:	2316      	movs	r3, #22
 8006608:	6003      	str	r3, [r0, #0]
 800660a:	2001      	movs	r0, #1
 800660c:	e7e7      	b.n	80065de <_raise_r+0x12>
 800660e:	2400      	movs	r4, #0
 8006610:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006614:	4628      	mov	r0, r5
 8006616:	4798      	blx	r3
 8006618:	2000      	movs	r0, #0
 800661a:	e7e0      	b.n	80065de <_raise_r+0x12>

0800661c <raise>:
 800661c:	4b02      	ldr	r3, [pc, #8]	; (8006628 <raise+0xc>)
 800661e:	4601      	mov	r1, r0
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	f7ff bfd3 	b.w	80065cc <_raise_r>
 8006626:	bf00      	nop
 8006628:	20000010 	.word	0x20000010

0800662c <_kill_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d07      	ldr	r5, [pc, #28]	; (800664c <_kill_r+0x20>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	4611      	mov	r1, r2
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	f7fb ff0f 	bl	800245c <_kill>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d102      	bne.n	8006648 <_kill_r+0x1c>
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	b103      	cbz	r3, 8006648 <_kill_r+0x1c>
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	bd38      	pop	{r3, r4, r5, pc}
 800664a:	bf00      	nop
 800664c:	200002ac 	.word	0x200002ac

08006650 <_getpid_r>:
 8006650:	f7fb befc 	b.w	800244c <_getpid>

08006654 <siprintf>:
 8006654:	b40e      	push	{r1, r2, r3}
 8006656:	b500      	push	{lr}
 8006658:	b09c      	sub	sp, #112	; 0x70
 800665a:	ab1d      	add	r3, sp, #116	; 0x74
 800665c:	9002      	str	r0, [sp, #8]
 800665e:	9006      	str	r0, [sp, #24]
 8006660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <siprintf+0x38>)
 8006666:	9107      	str	r1, [sp, #28]
 8006668:	9104      	str	r1, [sp, #16]
 800666a:	4909      	ldr	r1, [pc, #36]	; (8006690 <siprintf+0x3c>)
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	6800      	ldr	r0, [r0, #0]
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	a902      	add	r1, sp, #8
 8006678:	f000 f96c 	bl	8006954 <_svfiprintf_r>
 800667c:	9b02      	ldr	r3, [sp, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	b01c      	add	sp, #112	; 0x70
 8006684:	f85d eb04 	ldr.w	lr, [sp], #4
 8006688:	b003      	add	sp, #12
 800668a:	4770      	bx	lr
 800668c:	20000010 	.word	0x20000010
 8006690:	ffff0208 	.word	0xffff0208

08006694 <std>:
 8006694:	2300      	movs	r3, #0
 8006696:	b510      	push	{r4, lr}
 8006698:	4604      	mov	r4, r0
 800669a:	e9c0 3300 	strd	r3, r3, [r0]
 800669e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066a2:	6083      	str	r3, [r0, #8]
 80066a4:	8181      	strh	r1, [r0, #12]
 80066a6:	6643      	str	r3, [r0, #100]	; 0x64
 80066a8:	81c2      	strh	r2, [r0, #14]
 80066aa:	6183      	str	r3, [r0, #24]
 80066ac:	4619      	mov	r1, r3
 80066ae:	2208      	movs	r2, #8
 80066b0:	305c      	adds	r0, #92	; 0x5c
 80066b2:	f7ff fe7b 	bl	80063ac <memset>
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x38>)
 80066b8:	6263      	str	r3, [r4, #36]	; 0x24
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x3c>)
 80066bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <std+0x40>)
 80066c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <std+0x44>)
 80066c4:	6224      	str	r4, [r4, #32]
 80066c6:	6323      	str	r3, [r4, #48]	; 0x30
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	bf00      	nop
 80066cc:	08007131 	.word	0x08007131
 80066d0:	08007153 	.word	0x08007153
 80066d4:	0800718b 	.word	0x0800718b
 80066d8:	080071af 	.word	0x080071af

080066dc <_cleanup_r>:
 80066dc:	4901      	ldr	r1, [pc, #4]	; (80066e4 <_cleanup_r+0x8>)
 80066de:	f000 b8af 	b.w	8006840 <_fwalk_reent>
 80066e2:	bf00      	nop
 80066e4:	08007489 	.word	0x08007489

080066e8 <__sfmoreglue>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	2268      	movs	r2, #104	; 0x68
 80066ec:	1e4d      	subs	r5, r1, #1
 80066ee:	4355      	muls	r5, r2
 80066f0:	460e      	mov	r6, r1
 80066f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066f6:	f7ff fecd 	bl	8006494 <_malloc_r>
 80066fa:	4604      	mov	r4, r0
 80066fc:	b140      	cbz	r0, 8006710 <__sfmoreglue+0x28>
 80066fe:	2100      	movs	r1, #0
 8006700:	e9c0 1600 	strd	r1, r6, [r0]
 8006704:	300c      	adds	r0, #12
 8006706:	60a0      	str	r0, [r4, #8]
 8006708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800670c:	f7ff fe4e 	bl	80063ac <memset>
 8006710:	4620      	mov	r0, r4
 8006712:	bd70      	pop	{r4, r5, r6, pc}

08006714 <__sfp_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sfp_lock_acquire+0x8>)
 8006716:	f000 b8b3 	b.w	8006880 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	200002a9 	.word	0x200002a9

08006720 <__sfp_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sfp_lock_release+0x8>)
 8006722:	f000 b8ae 	b.w	8006882 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	200002a9 	.word	0x200002a9

0800672c <__sinit_lock_acquire>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__sinit_lock_acquire+0x8>)
 800672e:	f000 b8a7 	b.w	8006880 <__retarget_lock_acquire_recursive>
 8006732:	bf00      	nop
 8006734:	200002aa 	.word	0x200002aa

08006738 <__sinit_lock_release>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__sinit_lock_release+0x8>)
 800673a:	f000 b8a2 	b.w	8006882 <__retarget_lock_release_recursive>
 800673e:	bf00      	nop
 8006740:	200002aa 	.word	0x200002aa

08006744 <__sinit>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4604      	mov	r4, r0
 8006748:	f7ff fff0 	bl	800672c <__sinit_lock_acquire>
 800674c:	69a3      	ldr	r3, [r4, #24]
 800674e:	b11b      	cbz	r3, 8006758 <__sinit+0x14>
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f7ff bff0 	b.w	8006738 <__sinit_lock_release>
 8006758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800675c:	6523      	str	r3, [r4, #80]	; 0x50
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <__sinit+0x68>)
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <__sinit+0x6c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	62a2      	str	r2, [r4, #40]	; 0x28
 8006766:	42a3      	cmp	r3, r4
 8006768:	bf04      	itt	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	61a3      	streq	r3, [r4, #24]
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f820 	bl	80067b4 <__sfp>
 8006774:	6060      	str	r0, [r4, #4]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f81c 	bl	80067b4 <__sfp>
 800677c:	60a0      	str	r0, [r4, #8]
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f818 	bl	80067b4 <__sfp>
 8006784:	2200      	movs	r2, #0
 8006786:	60e0      	str	r0, [r4, #12]
 8006788:	2104      	movs	r1, #4
 800678a:	6860      	ldr	r0, [r4, #4]
 800678c:	f7ff ff82 	bl	8006694 <std>
 8006790:	68a0      	ldr	r0, [r4, #8]
 8006792:	2201      	movs	r2, #1
 8006794:	2109      	movs	r1, #9
 8006796:	f7ff ff7d 	bl	8006694 <std>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	2202      	movs	r2, #2
 800679e:	2112      	movs	r1, #18
 80067a0:	f7ff ff78 	bl	8006694 <std>
 80067a4:	2301      	movs	r3, #1
 80067a6:	61a3      	str	r3, [r4, #24]
 80067a8:	e7d2      	b.n	8006750 <__sinit+0xc>
 80067aa:	bf00      	nop
 80067ac:	08007818 	.word	0x08007818
 80067b0:	080066dd 	.word	0x080066dd

080067b4 <__sfp>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	4607      	mov	r7, r0
 80067b8:	f7ff ffac 	bl	8006714 <__sfp_lock_acquire>
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <__sfp+0x84>)
 80067be:	681e      	ldr	r6, [r3, #0]
 80067c0:	69b3      	ldr	r3, [r6, #24]
 80067c2:	b913      	cbnz	r3, 80067ca <__sfp+0x16>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff ffbd 	bl	8006744 <__sinit>
 80067ca:	3648      	adds	r6, #72	; 0x48
 80067cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	d503      	bpl.n	80067dc <__sfp+0x28>
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	b30b      	cbz	r3, 800681c <__sfp+0x68>
 80067d8:	6836      	ldr	r6, [r6, #0]
 80067da:	e7f7      	b.n	80067cc <__sfp+0x18>
 80067dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067e0:	b9d5      	cbnz	r5, 8006818 <__sfp+0x64>
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <__sfp+0x88>)
 80067e4:	60e3      	str	r3, [r4, #12]
 80067e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067ea:	6665      	str	r5, [r4, #100]	; 0x64
 80067ec:	f000 f847 	bl	800687e <__retarget_lock_init_recursive>
 80067f0:	f7ff ff96 	bl	8006720 <__sfp_lock_release>
 80067f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	61a5      	str	r5, [r4, #24]
 8006800:	2208      	movs	r2, #8
 8006802:	4629      	mov	r1, r5
 8006804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006808:	f7ff fdd0 	bl	80063ac <memset>
 800680c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006814:	4620      	mov	r0, r4
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	3468      	adds	r4, #104	; 0x68
 800681a:	e7d9      	b.n	80067d0 <__sfp+0x1c>
 800681c:	2104      	movs	r1, #4
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ff62 	bl	80066e8 <__sfmoreglue>
 8006824:	4604      	mov	r4, r0
 8006826:	6030      	str	r0, [r6, #0]
 8006828:	2800      	cmp	r0, #0
 800682a:	d1d5      	bne.n	80067d8 <__sfp+0x24>
 800682c:	f7ff ff78 	bl	8006720 <__sfp_lock_release>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	e7ee      	b.n	8006814 <__sfp+0x60>
 8006836:	bf00      	nop
 8006838:	08007818 	.word	0x08007818
 800683c:	ffff0001 	.word	0xffff0001

08006840 <_fwalk_reent>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4606      	mov	r6, r0
 8006846:	4688      	mov	r8, r1
 8006848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800684c:	2700      	movs	r7, #0
 800684e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006852:	f1b9 0901 	subs.w	r9, r9, #1
 8006856:	d505      	bpl.n	8006864 <_fwalk_reent+0x24>
 8006858:	6824      	ldr	r4, [r4, #0]
 800685a:	2c00      	cmp	r4, #0
 800685c:	d1f7      	bne.n	800684e <_fwalk_reent+0xe>
 800685e:	4638      	mov	r0, r7
 8006860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006864:	89ab      	ldrh	r3, [r5, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d907      	bls.n	800687a <_fwalk_reent+0x3a>
 800686a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686e:	3301      	adds	r3, #1
 8006870:	d003      	beq.n	800687a <_fwalk_reent+0x3a>
 8006872:	4629      	mov	r1, r5
 8006874:	4630      	mov	r0, r6
 8006876:	47c0      	blx	r8
 8006878:	4307      	orrs	r7, r0
 800687a:	3568      	adds	r5, #104	; 0x68
 800687c:	e7e9      	b.n	8006852 <_fwalk_reent+0x12>

0800687e <__retarget_lock_init_recursive>:
 800687e:	4770      	bx	lr

08006880 <__retarget_lock_acquire_recursive>:
 8006880:	4770      	bx	lr

08006882 <__retarget_lock_release_recursive>:
 8006882:	4770      	bx	lr

08006884 <__malloc_lock>:
 8006884:	4801      	ldr	r0, [pc, #4]	; (800688c <__malloc_lock+0x8>)
 8006886:	f7ff bffb 	b.w	8006880 <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	200002a8 	.word	0x200002a8

08006890 <__malloc_unlock>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__malloc_unlock+0x8>)
 8006892:	f7ff bff6 	b.w	8006882 <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	200002a8 	.word	0x200002a8

0800689c <__ssputs_r>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	688e      	ldr	r6, [r1, #8]
 80068a2:	429e      	cmp	r6, r3
 80068a4:	4682      	mov	sl, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	4690      	mov	r8, r2
 80068aa:	461f      	mov	r7, r3
 80068ac:	d838      	bhi.n	8006920 <__ssputs_r+0x84>
 80068ae:	898a      	ldrh	r2, [r1, #12]
 80068b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068b4:	d032      	beq.n	800691c <__ssputs_r+0x80>
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	6909      	ldr	r1, [r1, #16]
 80068ba:	eba5 0901 	sub.w	r9, r5, r1
 80068be:	6965      	ldr	r5, [r4, #20]
 80068c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068c8:	3301      	adds	r3, #1
 80068ca:	444b      	add	r3, r9
 80068cc:	106d      	asrs	r5, r5, #1
 80068ce:	429d      	cmp	r5, r3
 80068d0:	bf38      	it	cc
 80068d2:	461d      	movcc	r5, r3
 80068d4:	0553      	lsls	r3, r2, #21
 80068d6:	d531      	bpl.n	800693c <__ssputs_r+0xa0>
 80068d8:	4629      	mov	r1, r5
 80068da:	f7ff fddb 	bl	8006494 <_malloc_r>
 80068de:	4606      	mov	r6, r0
 80068e0:	b950      	cbnz	r0, 80068f8 <__ssputs_r+0x5c>
 80068e2:	230c      	movs	r3, #12
 80068e4:	f8ca 3000 	str.w	r3, [sl]
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	6921      	ldr	r1, [r4, #16]
 80068fa:	464a      	mov	r2, r9
 80068fc:	f000 fe78 	bl	80075f0 <memcpy>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	6126      	str	r6, [r4, #16]
 800690e:	6165      	str	r5, [r4, #20]
 8006910:	444e      	add	r6, r9
 8006912:	eba5 0509 	sub.w	r5, r5, r9
 8006916:	6026      	str	r6, [r4, #0]
 8006918:	60a5      	str	r5, [r4, #8]
 800691a:	463e      	mov	r6, r7
 800691c:	42be      	cmp	r6, r7
 800691e:	d900      	bls.n	8006922 <__ssputs_r+0x86>
 8006920:	463e      	mov	r6, r7
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	4632      	mov	r2, r6
 8006926:	4641      	mov	r1, r8
 8006928:	f000 fe70 	bl	800760c <memmove>
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	1b9b      	subs	r3, r3, r6
 8006930:	60a3      	str	r3, [r4, #8]
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	4433      	add	r3, r6
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	2000      	movs	r0, #0
 800693a:	e7db      	b.n	80068f4 <__ssputs_r+0x58>
 800693c:	462a      	mov	r2, r5
 800693e:	f000 fe7f 	bl	8007640 <_realloc_r>
 8006942:	4606      	mov	r6, r0
 8006944:	2800      	cmp	r0, #0
 8006946:	d1e1      	bne.n	800690c <__ssputs_r+0x70>
 8006948:	6921      	ldr	r1, [r4, #16]
 800694a:	4650      	mov	r0, sl
 800694c:	f7ff fd36 	bl	80063bc <_free_r>
 8006950:	e7c7      	b.n	80068e2 <__ssputs_r+0x46>
	...

08006954 <_svfiprintf_r>:
 8006954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	4698      	mov	r8, r3
 800695a:	898b      	ldrh	r3, [r1, #12]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	b09d      	sub	sp, #116	; 0x74
 8006960:	4607      	mov	r7, r0
 8006962:	460d      	mov	r5, r1
 8006964:	4614      	mov	r4, r2
 8006966:	d50e      	bpl.n	8006986 <_svfiprintf_r+0x32>
 8006968:	690b      	ldr	r3, [r1, #16]
 800696a:	b963      	cbnz	r3, 8006986 <_svfiprintf_r+0x32>
 800696c:	2140      	movs	r1, #64	; 0x40
 800696e:	f7ff fd91 	bl	8006494 <_malloc_r>
 8006972:	6028      	str	r0, [r5, #0]
 8006974:	6128      	str	r0, [r5, #16]
 8006976:	b920      	cbnz	r0, 8006982 <_svfiprintf_r+0x2e>
 8006978:	230c      	movs	r3, #12
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006980:	e0d1      	b.n	8006b26 <_svfiprintf_r+0x1d2>
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	616b      	str	r3, [r5, #20]
 8006986:	2300      	movs	r3, #0
 8006988:	9309      	str	r3, [sp, #36]	; 0x24
 800698a:	2320      	movs	r3, #32
 800698c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006990:	f8cd 800c 	str.w	r8, [sp, #12]
 8006994:	2330      	movs	r3, #48	; 0x30
 8006996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b40 <_svfiprintf_r+0x1ec>
 800699a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800699e:	f04f 0901 	mov.w	r9, #1
 80069a2:	4623      	mov	r3, r4
 80069a4:	469a      	mov	sl, r3
 80069a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069aa:	b10a      	cbz	r2, 80069b0 <_svfiprintf_r+0x5c>
 80069ac:	2a25      	cmp	r2, #37	; 0x25
 80069ae:	d1f9      	bne.n	80069a4 <_svfiprintf_r+0x50>
 80069b0:	ebba 0b04 	subs.w	fp, sl, r4
 80069b4:	d00b      	beq.n	80069ce <_svfiprintf_r+0x7a>
 80069b6:	465b      	mov	r3, fp
 80069b8:	4622      	mov	r2, r4
 80069ba:	4629      	mov	r1, r5
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff ff6d 	bl	800689c <__ssputs_r>
 80069c2:	3001      	adds	r0, #1
 80069c4:	f000 80aa 	beq.w	8006b1c <_svfiprintf_r+0x1c8>
 80069c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ca:	445a      	add	r2, fp
 80069cc:	9209      	str	r2, [sp, #36]	; 0x24
 80069ce:	f89a 3000 	ldrb.w	r3, [sl]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80a2 	beq.w	8006b1c <_svfiprintf_r+0x1c8>
 80069d8:	2300      	movs	r3, #0
 80069da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e2:	f10a 0a01 	add.w	sl, sl, #1
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	9307      	str	r3, [sp, #28]
 80069ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ee:	931a      	str	r3, [sp, #104]	; 0x68
 80069f0:	4654      	mov	r4, sl
 80069f2:	2205      	movs	r2, #5
 80069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f8:	4851      	ldr	r0, [pc, #324]	; (8006b40 <_svfiprintf_r+0x1ec>)
 80069fa:	f7f9 fbf1 	bl	80001e0 <memchr>
 80069fe:	9a04      	ldr	r2, [sp, #16]
 8006a00:	b9d8      	cbnz	r0, 8006a3a <_svfiprintf_r+0xe6>
 8006a02:	06d0      	lsls	r0, r2, #27
 8006a04:	bf44      	itt	mi
 8006a06:	2320      	movmi	r3, #32
 8006a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a0c:	0711      	lsls	r1, r2, #28
 8006a0e:	bf44      	itt	mi
 8006a10:	232b      	movmi	r3, #43	; 0x2b
 8006a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a16:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1c:	d015      	beq.n	8006a4a <_svfiprintf_r+0xf6>
 8006a1e:	9a07      	ldr	r2, [sp, #28]
 8006a20:	4654      	mov	r4, sl
 8006a22:	2000      	movs	r0, #0
 8006a24:	f04f 0c0a 	mov.w	ip, #10
 8006a28:	4621      	mov	r1, r4
 8006a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a2e:	3b30      	subs	r3, #48	; 0x30
 8006a30:	2b09      	cmp	r3, #9
 8006a32:	d94e      	bls.n	8006ad2 <_svfiprintf_r+0x17e>
 8006a34:	b1b0      	cbz	r0, 8006a64 <_svfiprintf_r+0x110>
 8006a36:	9207      	str	r2, [sp, #28]
 8006a38:	e014      	b.n	8006a64 <_svfiprintf_r+0x110>
 8006a3a:	eba0 0308 	sub.w	r3, r0, r8
 8006a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	46a2      	mov	sl, r4
 8006a48:	e7d2      	b.n	80069f0 <_svfiprintf_r+0x9c>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	1d19      	adds	r1, r3, #4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	9103      	str	r1, [sp, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfbb      	ittet	lt
 8006a56:	425b      	neglt	r3, r3
 8006a58:	f042 0202 	orrlt.w	r2, r2, #2
 8006a5c:	9307      	strge	r3, [sp, #28]
 8006a5e:	9307      	strlt	r3, [sp, #28]
 8006a60:	bfb8      	it	lt
 8006a62:	9204      	strlt	r2, [sp, #16]
 8006a64:	7823      	ldrb	r3, [r4, #0]
 8006a66:	2b2e      	cmp	r3, #46	; 0x2e
 8006a68:	d10c      	bne.n	8006a84 <_svfiprintf_r+0x130>
 8006a6a:	7863      	ldrb	r3, [r4, #1]
 8006a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6e:	d135      	bne.n	8006adc <_svfiprintf_r+0x188>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	1d1a      	adds	r2, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	9203      	str	r2, [sp, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfb8      	it	lt
 8006a7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a80:	3402      	adds	r4, #2
 8006a82:	9305      	str	r3, [sp, #20]
 8006a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b50 <_svfiprintf_r+0x1fc>
 8006a88:	7821      	ldrb	r1, [r4, #0]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	f7f9 fba7 	bl	80001e0 <memchr>
 8006a92:	b140      	cbz	r0, 8006aa6 <_svfiprintf_r+0x152>
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	eba0 000a 	sub.w	r0, r0, sl
 8006a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	4303      	orrs	r3, r0
 8006aa2:	3401      	adds	r4, #1
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aaa:	4826      	ldr	r0, [pc, #152]	; (8006b44 <_svfiprintf_r+0x1f0>)
 8006aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ab0:	2206      	movs	r2, #6
 8006ab2:	f7f9 fb95 	bl	80001e0 <memchr>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d038      	beq.n	8006b2c <_svfiprintf_r+0x1d8>
 8006aba:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <_svfiprintf_r+0x1f4>)
 8006abc:	bb1b      	cbnz	r3, 8006b06 <_svfiprintf_r+0x1b2>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	3307      	adds	r3, #7
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006acc:	4433      	add	r3, r6
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	e767      	b.n	80069a2 <_svfiprintf_r+0x4e>
 8006ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	2001      	movs	r0, #1
 8006ada:	e7a5      	b.n	8006a28 <_svfiprintf_r+0xd4>
 8006adc:	2300      	movs	r3, #0
 8006ade:	3401      	adds	r4, #1
 8006ae0:	9305      	str	r3, [sp, #20]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f04f 0c0a 	mov.w	ip, #10
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aee:	3a30      	subs	r2, #48	; 0x30
 8006af0:	2a09      	cmp	r2, #9
 8006af2:	d903      	bls.n	8006afc <_svfiprintf_r+0x1a8>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0c5      	beq.n	8006a84 <_svfiprintf_r+0x130>
 8006af8:	9105      	str	r1, [sp, #20]
 8006afa:	e7c3      	b.n	8006a84 <_svfiprintf_r+0x130>
 8006afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b00:	4604      	mov	r4, r0
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7f0      	b.n	8006ae8 <_svfiprintf_r+0x194>
 8006b06:	ab03      	add	r3, sp, #12
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	462a      	mov	r2, r5
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <_svfiprintf_r+0x1f8>)
 8006b0e:	a904      	add	r1, sp, #16
 8006b10:	4638      	mov	r0, r7
 8006b12:	f3af 8000 	nop.w
 8006b16:	1c42      	adds	r2, r0, #1
 8006b18:	4606      	mov	r6, r0
 8006b1a:	d1d6      	bne.n	8006aca <_svfiprintf_r+0x176>
 8006b1c:	89ab      	ldrh	r3, [r5, #12]
 8006b1e:	065b      	lsls	r3, r3, #25
 8006b20:	f53f af2c 	bmi.w	800697c <_svfiprintf_r+0x28>
 8006b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b26:	b01d      	add	sp, #116	; 0x74
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <_svfiprintf_r+0x1f8>)
 8006b34:	a904      	add	r1, sp, #16
 8006b36:	4638      	mov	r0, r7
 8006b38:	f000 f9d4 	bl	8006ee4 <_printf_i>
 8006b3c:	e7eb      	b.n	8006b16 <_svfiprintf_r+0x1c2>
 8006b3e:	bf00      	nop
 8006b40:	0800787c 	.word	0x0800787c
 8006b44:	08007886 	.word	0x08007886
 8006b48:	00000000 	.word	0x00000000
 8006b4c:	0800689d 	.word	0x0800689d
 8006b50:	08007882 	.word	0x08007882

08006b54 <__sfputc_r>:
 8006b54:	6893      	ldr	r3, [r2, #8]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	b410      	push	{r4}
 8006b5c:	6093      	str	r3, [r2, #8]
 8006b5e:	da08      	bge.n	8006b72 <__sfputc_r+0x1e>
 8006b60:	6994      	ldr	r4, [r2, #24]
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	db01      	blt.n	8006b6a <__sfputc_r+0x16>
 8006b66:	290a      	cmp	r1, #10
 8006b68:	d103      	bne.n	8006b72 <__sfputc_r+0x1e>
 8006b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b6e:	f000 bb23 	b.w	80071b8 <__swbuf_r>
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	1c58      	adds	r0, r3, #1
 8006b76:	6010      	str	r0, [r2, #0]
 8006b78:	7019      	strb	r1, [r3, #0]
 8006b7a:	4608      	mov	r0, r1
 8006b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <__sfputs_r>:
 8006b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	4614      	mov	r4, r2
 8006b8a:	18d5      	adds	r5, r2, r3
 8006b8c:	42ac      	cmp	r4, r5
 8006b8e:	d101      	bne.n	8006b94 <__sfputs_r+0x12>
 8006b90:	2000      	movs	r0, #0
 8006b92:	e007      	b.n	8006ba4 <__sfputs_r+0x22>
 8006b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b98:	463a      	mov	r2, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ffda 	bl	8006b54 <__sfputc_r>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d1f3      	bne.n	8006b8c <__sfputs_r+0xa>
 8006ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ba8 <_vfiprintf_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	460d      	mov	r5, r1
 8006bae:	b09d      	sub	sp, #116	; 0x74
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	4698      	mov	r8, r3
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	b118      	cbz	r0, 8006bc0 <_vfiprintf_r+0x18>
 8006bb8:	6983      	ldr	r3, [r0, #24]
 8006bba:	b90b      	cbnz	r3, 8006bc0 <_vfiprintf_r+0x18>
 8006bbc:	f7ff fdc2 	bl	8006744 <__sinit>
 8006bc0:	4b89      	ldr	r3, [pc, #548]	; (8006de8 <_vfiprintf_r+0x240>)
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	d11b      	bne.n	8006bfe <_vfiprintf_r+0x56>
 8006bc6:	6875      	ldr	r5, [r6, #4]
 8006bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bca:	07d9      	lsls	r1, r3, #31
 8006bcc:	d405      	bmi.n	8006bda <_vfiprintf_r+0x32>
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	059a      	lsls	r2, r3, #22
 8006bd2:	d402      	bmi.n	8006bda <_vfiprintf_r+0x32>
 8006bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd6:	f7ff fe53 	bl	8006880 <__retarget_lock_acquire_recursive>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	071b      	lsls	r3, r3, #28
 8006bde:	d501      	bpl.n	8006be4 <_vfiprintf_r+0x3c>
 8006be0:	692b      	ldr	r3, [r5, #16]
 8006be2:	b9eb      	cbnz	r3, 8006c20 <_vfiprintf_r+0x78>
 8006be4:	4629      	mov	r1, r5
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 fb4a 	bl	8007280 <__swsetup_r>
 8006bec:	b1c0      	cbz	r0, 8006c20 <_vfiprintf_r+0x78>
 8006bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf0:	07dc      	lsls	r4, r3, #31
 8006bf2:	d50e      	bpl.n	8006c12 <_vfiprintf_r+0x6a>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf8:	b01d      	add	sp, #116	; 0x74
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	4b7b      	ldr	r3, [pc, #492]	; (8006dec <_vfiprintf_r+0x244>)
 8006c00:	429d      	cmp	r5, r3
 8006c02:	d101      	bne.n	8006c08 <_vfiprintf_r+0x60>
 8006c04:	68b5      	ldr	r5, [r6, #8]
 8006c06:	e7df      	b.n	8006bc8 <_vfiprintf_r+0x20>
 8006c08:	4b79      	ldr	r3, [pc, #484]	; (8006df0 <_vfiprintf_r+0x248>)
 8006c0a:	429d      	cmp	r5, r3
 8006c0c:	bf08      	it	eq
 8006c0e:	68f5      	ldreq	r5, [r6, #12]
 8006c10:	e7da      	b.n	8006bc8 <_vfiprintf_r+0x20>
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	0598      	lsls	r0, r3, #22
 8006c16:	d4ed      	bmi.n	8006bf4 <_vfiprintf_r+0x4c>
 8006c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1a:	f7ff fe32 	bl	8006882 <__retarget_lock_release_recursive>
 8006c1e:	e7e9      	b.n	8006bf4 <_vfiprintf_r+0x4c>
 8006c20:	2300      	movs	r3, #0
 8006c22:	9309      	str	r3, [sp, #36]	; 0x24
 8006c24:	2320      	movs	r3, #32
 8006c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2e:	2330      	movs	r3, #48	; 0x30
 8006c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006df4 <_vfiprintf_r+0x24c>
 8006c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c38:	f04f 0901 	mov.w	r9, #1
 8006c3c:	4623      	mov	r3, r4
 8006c3e:	469a      	mov	sl, r3
 8006c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c44:	b10a      	cbz	r2, 8006c4a <_vfiprintf_r+0xa2>
 8006c46:	2a25      	cmp	r2, #37	; 0x25
 8006c48:	d1f9      	bne.n	8006c3e <_vfiprintf_r+0x96>
 8006c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c4e:	d00b      	beq.n	8006c68 <_vfiprintf_r+0xc0>
 8006c50:	465b      	mov	r3, fp
 8006c52:	4622      	mov	r2, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff ff93 	bl	8006b82 <__sfputs_r>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f000 80aa 	beq.w	8006db6 <_vfiprintf_r+0x20e>
 8006c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c64:	445a      	add	r2, fp
 8006c66:	9209      	str	r2, [sp, #36]	; 0x24
 8006c68:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80a2 	beq.w	8006db6 <_vfiprintf_r+0x20e>
 8006c72:	2300      	movs	r3, #0
 8006c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c7c:	f10a 0a01 	add.w	sl, sl, #1
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	9307      	str	r3, [sp, #28]
 8006c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c88:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8a:	4654      	mov	r4, sl
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c92:	4858      	ldr	r0, [pc, #352]	; (8006df4 <_vfiprintf_r+0x24c>)
 8006c94:	f7f9 faa4 	bl	80001e0 <memchr>
 8006c98:	9a04      	ldr	r2, [sp, #16]
 8006c9a:	b9d8      	cbnz	r0, 8006cd4 <_vfiprintf_r+0x12c>
 8006c9c:	06d1      	lsls	r1, r2, #27
 8006c9e:	bf44      	itt	mi
 8006ca0:	2320      	movmi	r3, #32
 8006ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca6:	0713      	lsls	r3, r2, #28
 8006ca8:	bf44      	itt	mi
 8006caa:	232b      	movmi	r3, #43	; 0x2b
 8006cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb6:	d015      	beq.n	8006ce4 <_vfiprintf_r+0x13c>
 8006cb8:	9a07      	ldr	r2, [sp, #28]
 8006cba:	4654      	mov	r4, sl
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f04f 0c0a 	mov.w	ip, #10
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc8:	3b30      	subs	r3, #48	; 0x30
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d94e      	bls.n	8006d6c <_vfiprintf_r+0x1c4>
 8006cce:	b1b0      	cbz	r0, 8006cfe <_vfiprintf_r+0x156>
 8006cd0:	9207      	str	r2, [sp, #28]
 8006cd2:	e014      	b.n	8006cfe <_vfiprintf_r+0x156>
 8006cd4:	eba0 0308 	sub.w	r3, r0, r8
 8006cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	46a2      	mov	sl, r4
 8006ce2:	e7d2      	b.n	8006c8a <_vfiprintf_r+0xe2>
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	1d19      	adds	r1, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	9103      	str	r1, [sp, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bfbb      	ittet	lt
 8006cf0:	425b      	neglt	r3, r3
 8006cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf6:	9307      	strge	r3, [sp, #28]
 8006cf8:	9307      	strlt	r3, [sp, #28]
 8006cfa:	bfb8      	it	lt
 8006cfc:	9204      	strlt	r2, [sp, #16]
 8006cfe:	7823      	ldrb	r3, [r4, #0]
 8006d00:	2b2e      	cmp	r3, #46	; 0x2e
 8006d02:	d10c      	bne.n	8006d1e <_vfiprintf_r+0x176>
 8006d04:	7863      	ldrb	r3, [r4, #1]
 8006d06:	2b2a      	cmp	r3, #42	; 0x2a
 8006d08:	d135      	bne.n	8006d76 <_vfiprintf_r+0x1ce>
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	1d1a      	adds	r2, r3, #4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	9203      	str	r2, [sp, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bfb8      	it	lt
 8006d16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d1a:	3402      	adds	r4, #2
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e04 <_vfiprintf_r+0x25c>
 8006d22:	7821      	ldrb	r1, [r4, #0]
 8006d24:	2203      	movs	r2, #3
 8006d26:	4650      	mov	r0, sl
 8006d28:	f7f9 fa5a 	bl	80001e0 <memchr>
 8006d2c:	b140      	cbz	r0, 8006d40 <_vfiprintf_r+0x198>
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	eba0 000a 	sub.w	r0, r0, sl
 8006d34:	fa03 f000 	lsl.w	r0, r3, r0
 8006d38:	9b04      	ldr	r3, [sp, #16]
 8006d3a:	4303      	orrs	r3, r0
 8006d3c:	3401      	adds	r4, #1
 8006d3e:	9304      	str	r3, [sp, #16]
 8006d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d44:	482c      	ldr	r0, [pc, #176]	; (8006df8 <_vfiprintf_r+0x250>)
 8006d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d4a:	2206      	movs	r2, #6
 8006d4c:	f7f9 fa48 	bl	80001e0 <memchr>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d03f      	beq.n	8006dd4 <_vfiprintf_r+0x22c>
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <_vfiprintf_r+0x254>)
 8006d56:	bb1b      	cbnz	r3, 8006da0 <_vfiprintf_r+0x1f8>
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	3307      	adds	r3, #7
 8006d5c:	f023 0307 	bic.w	r3, r3, #7
 8006d60:	3308      	adds	r3, #8
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d66:	443b      	add	r3, r7
 8006d68:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6a:	e767      	b.n	8006c3c <_vfiprintf_r+0x94>
 8006d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d70:	460c      	mov	r4, r1
 8006d72:	2001      	movs	r0, #1
 8006d74:	e7a5      	b.n	8006cc2 <_vfiprintf_r+0x11a>
 8006d76:	2300      	movs	r3, #0
 8006d78:	3401      	adds	r4, #1
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f04f 0c0a 	mov.w	ip, #10
 8006d82:	4620      	mov	r0, r4
 8006d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d88:	3a30      	subs	r2, #48	; 0x30
 8006d8a:	2a09      	cmp	r2, #9
 8006d8c:	d903      	bls.n	8006d96 <_vfiprintf_r+0x1ee>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0c5      	beq.n	8006d1e <_vfiprintf_r+0x176>
 8006d92:	9105      	str	r1, [sp, #20]
 8006d94:	e7c3      	b.n	8006d1e <_vfiprintf_r+0x176>
 8006d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e7f0      	b.n	8006d82 <_vfiprintf_r+0x1da>
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	462a      	mov	r2, r5
 8006da6:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <_vfiprintf_r+0x258>)
 8006da8:	a904      	add	r1, sp, #16
 8006daa:	4630      	mov	r0, r6
 8006dac:	f3af 8000 	nop.w
 8006db0:	4607      	mov	r7, r0
 8006db2:	1c78      	adds	r0, r7, #1
 8006db4:	d1d6      	bne.n	8006d64 <_vfiprintf_r+0x1bc>
 8006db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db8:	07d9      	lsls	r1, r3, #31
 8006dba:	d405      	bmi.n	8006dc8 <_vfiprintf_r+0x220>
 8006dbc:	89ab      	ldrh	r3, [r5, #12]
 8006dbe:	059a      	lsls	r2, r3, #22
 8006dc0:	d402      	bmi.n	8006dc8 <_vfiprintf_r+0x220>
 8006dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc4:	f7ff fd5d 	bl	8006882 <__retarget_lock_release_recursive>
 8006dc8:	89ab      	ldrh	r3, [r5, #12]
 8006dca:	065b      	lsls	r3, r3, #25
 8006dcc:	f53f af12 	bmi.w	8006bf4 <_vfiprintf_r+0x4c>
 8006dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd2:	e711      	b.n	8006bf8 <_vfiprintf_r+0x50>
 8006dd4:	ab03      	add	r3, sp, #12
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <_vfiprintf_r+0x258>)
 8006ddc:	a904      	add	r1, sp, #16
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 f880 	bl	8006ee4 <_printf_i>
 8006de4:	e7e4      	b.n	8006db0 <_vfiprintf_r+0x208>
 8006de6:	bf00      	nop
 8006de8:	0800783c 	.word	0x0800783c
 8006dec:	0800785c 	.word	0x0800785c
 8006df0:	0800781c 	.word	0x0800781c
 8006df4:	0800787c 	.word	0x0800787c
 8006df8:	08007886 	.word	0x08007886
 8006dfc:	00000000 	.word	0x00000000
 8006e00:	08006b83 	.word	0x08006b83
 8006e04:	08007882 	.word	0x08007882

08006e08 <_printf_common>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	4699      	mov	r9, r3
 8006e10:	688a      	ldr	r2, [r1, #8]
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	bfb8      	it	lt
 8006e1c:	4613      	movlt	r3, r2
 8006e1e:	6033      	str	r3, [r6, #0]
 8006e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e24:	4607      	mov	r7, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b10a      	cbz	r2, 8006e2e <_printf_common+0x26>
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	0699      	lsls	r1, r3, #26
 8006e32:	bf42      	ittt	mi
 8006e34:	6833      	ldrmi	r3, [r6, #0]
 8006e36:	3302      	addmi	r3, #2
 8006e38:	6033      	strmi	r3, [r6, #0]
 8006e3a:	6825      	ldr	r5, [r4, #0]
 8006e3c:	f015 0506 	ands.w	r5, r5, #6
 8006e40:	d106      	bne.n	8006e50 <_printf_common+0x48>
 8006e42:	f104 0a19 	add.w	sl, r4, #25
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	6832      	ldr	r2, [r6, #0]
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dc26      	bgt.n	8006e9e <_printf_common+0x96>
 8006e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e54:	1e13      	subs	r3, r2, #0
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	bf18      	it	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	0692      	lsls	r2, r2, #26
 8006e5e:	d42b      	bmi.n	8006eb8 <_printf_common+0xb0>
 8006e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e64:	4649      	mov	r1, r9
 8006e66:	4638      	mov	r0, r7
 8006e68:	47c0      	blx	r8
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d01e      	beq.n	8006eac <_printf_common+0xa4>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	68e5      	ldr	r5, [r4, #12]
 8006e72:	6832      	ldr	r2, [r6, #0]
 8006e74:	f003 0306 	and.w	r3, r3, #6
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	bf08      	it	eq
 8006e7c:	1aad      	subeq	r5, r5, r2
 8006e7e:	68a3      	ldr	r3, [r4, #8]
 8006e80:	6922      	ldr	r2, [r4, #16]
 8006e82:	bf0c      	ite	eq
 8006e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e88:	2500      	movne	r5, #0
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	bfc4      	itt	gt
 8006e8e:	1a9b      	subgt	r3, r3, r2
 8006e90:	18ed      	addgt	r5, r5, r3
 8006e92:	2600      	movs	r6, #0
 8006e94:	341a      	adds	r4, #26
 8006e96:	42b5      	cmp	r5, r6
 8006e98:	d11a      	bne.n	8006ed0 <_printf_common+0xc8>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e008      	b.n	8006eb0 <_printf_common+0xa8>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	47c0      	blx	r8
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d103      	bne.n	8006eb4 <_printf_common+0xac>
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	e7c6      	b.n	8006e46 <_printf_common+0x3e>
 8006eb8:	18e1      	adds	r1, r4, r3
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	2030      	movs	r0, #48	; 0x30
 8006ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ec2:	4422      	add	r2, r4
 8006ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ecc:	3302      	adds	r3, #2
 8006ece:	e7c7      	b.n	8006e60 <_printf_common+0x58>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c0      	blx	r8
 8006eda:	3001      	adds	r0, #1
 8006edc:	d0e6      	beq.n	8006eac <_printf_common+0xa4>
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7d9      	b.n	8006e96 <_printf_common+0x8e>
	...

08006ee4 <_printf_i>:
 8006ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	7e0f      	ldrb	r7, [r1, #24]
 8006eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006eec:	2f78      	cmp	r7, #120	; 0x78
 8006eee:	4691      	mov	r9, r2
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	469a      	mov	sl, r3
 8006ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006efa:	d807      	bhi.n	8006f0c <_printf_i+0x28>
 8006efc:	2f62      	cmp	r7, #98	; 0x62
 8006efe:	d80a      	bhi.n	8006f16 <_printf_i+0x32>
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	f000 80d8 	beq.w	80070b6 <_printf_i+0x1d2>
 8006f06:	2f58      	cmp	r7, #88	; 0x58
 8006f08:	f000 80a3 	beq.w	8007052 <_printf_i+0x16e>
 8006f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f14:	e03a      	b.n	8006f8c <_printf_i+0xa8>
 8006f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f1a:	2b15      	cmp	r3, #21
 8006f1c:	d8f6      	bhi.n	8006f0c <_printf_i+0x28>
 8006f1e:	a101      	add	r1, pc, #4	; (adr r1, 8006f24 <_printf_i+0x40>)
 8006f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f0d 	.word	0x08006f0d
 8006f30:	08006f0d 	.word	0x08006f0d
 8006f34:	08006f0d 	.word	0x08006f0d
 8006f38:	08006f0d 	.word	0x08006f0d
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08006f0d 	.word	0x08006f0d
 8006f44:	08006f0d 	.word	0x08006f0d
 8006f48:	08006f0d 	.word	0x08006f0d
 8006f4c:	08006f0d 	.word	0x08006f0d
 8006f50:	0800709d 	.word	0x0800709d
 8006f54:	08006fc1 	.word	0x08006fc1
 8006f58:	0800707f 	.word	0x0800707f
 8006f5c:	08006f0d 	.word	0x08006f0d
 8006f60:	08006f0d 	.word	0x08006f0d
 8006f64:	080070bf 	.word	0x080070bf
 8006f68:	08006f0d 	.word	0x08006f0d
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006f0d 	.word	0x08006f0d
 8006f74:	08006f0d 	.word	0x08006f0d
 8006f78:	08007087 	.word	0x08007087
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	1d1a      	adds	r2, r3, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	602a      	str	r2, [r5, #0]
 8006f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0a3      	b.n	80070d8 <_printf_i+0x1f4>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	6829      	ldr	r1, [r5, #0]
 8006f94:	0606      	lsls	r6, r0, #24
 8006f96:	f101 0304 	add.w	r3, r1, #4
 8006f9a:	d50a      	bpl.n	8006fb2 <_printf_i+0xce>
 8006f9c:	680e      	ldr	r6, [r1, #0]
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	da03      	bge.n	8006fac <_printf_i+0xc8>
 8006fa4:	232d      	movs	r3, #45	; 0x2d
 8006fa6:	4276      	negs	r6, r6
 8006fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fac:	485e      	ldr	r0, [pc, #376]	; (8007128 <_printf_i+0x244>)
 8006fae:	230a      	movs	r3, #10
 8006fb0:	e019      	b.n	8006fe6 <_printf_i+0x102>
 8006fb2:	680e      	ldr	r6, [r1, #0]
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fba:	bf18      	it	ne
 8006fbc:	b236      	sxthne	r6, r6
 8006fbe:	e7ef      	b.n	8006fa0 <_printf_i+0xbc>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	1d19      	adds	r1, r3, #4
 8006fc6:	6029      	str	r1, [r5, #0]
 8006fc8:	0601      	lsls	r1, r0, #24
 8006fca:	d501      	bpl.n	8006fd0 <_printf_i+0xec>
 8006fcc:	681e      	ldr	r6, [r3, #0]
 8006fce:	e002      	b.n	8006fd6 <_printf_i+0xf2>
 8006fd0:	0646      	lsls	r6, r0, #25
 8006fd2:	d5fb      	bpl.n	8006fcc <_printf_i+0xe8>
 8006fd4:	881e      	ldrh	r6, [r3, #0]
 8006fd6:	4854      	ldr	r0, [pc, #336]	; (8007128 <_printf_i+0x244>)
 8006fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8006fda:	bf0c      	ite	eq
 8006fdc:	2308      	moveq	r3, #8
 8006fde:	230a      	movne	r3, #10
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fe6:	6865      	ldr	r5, [r4, #4]
 8006fe8:	60a5      	str	r5, [r4, #8]
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	bfa2      	ittt	ge
 8006fee:	6821      	ldrge	r1, [r4, #0]
 8006ff0:	f021 0104 	bicge.w	r1, r1, #4
 8006ff4:	6021      	strge	r1, [r4, #0]
 8006ff6:	b90e      	cbnz	r6, 8006ffc <_printf_i+0x118>
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	d04d      	beq.n	8007098 <_printf_i+0x1b4>
 8006ffc:	4615      	mov	r5, r2
 8006ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007002:	fb03 6711 	mls	r7, r3, r1, r6
 8007006:	5dc7      	ldrb	r7, [r0, r7]
 8007008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800700c:	4637      	mov	r7, r6
 800700e:	42bb      	cmp	r3, r7
 8007010:	460e      	mov	r6, r1
 8007012:	d9f4      	bls.n	8006ffe <_printf_i+0x11a>
 8007014:	2b08      	cmp	r3, #8
 8007016:	d10b      	bne.n	8007030 <_printf_i+0x14c>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	07de      	lsls	r6, r3, #31
 800701c:	d508      	bpl.n	8007030 <_printf_i+0x14c>
 800701e:	6923      	ldr	r3, [r4, #16]
 8007020:	6861      	ldr	r1, [r4, #4]
 8007022:	4299      	cmp	r1, r3
 8007024:	bfde      	ittt	le
 8007026:	2330      	movle	r3, #48	; 0x30
 8007028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800702c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007030:	1b52      	subs	r2, r2, r5
 8007032:	6122      	str	r2, [r4, #16]
 8007034:	f8cd a000 	str.w	sl, [sp]
 8007038:	464b      	mov	r3, r9
 800703a:	aa03      	add	r2, sp, #12
 800703c:	4621      	mov	r1, r4
 800703e:	4640      	mov	r0, r8
 8007040:	f7ff fee2 	bl	8006e08 <_printf_common>
 8007044:	3001      	adds	r0, #1
 8007046:	d14c      	bne.n	80070e2 <_printf_i+0x1fe>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704c:	b004      	add	sp, #16
 800704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007052:	4835      	ldr	r0, [pc, #212]	; (8007128 <_printf_i+0x244>)
 8007054:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007058:	6829      	ldr	r1, [r5, #0]
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007060:	6029      	str	r1, [r5, #0]
 8007062:	061d      	lsls	r5, r3, #24
 8007064:	d514      	bpl.n	8007090 <_printf_i+0x1ac>
 8007066:	07df      	lsls	r7, r3, #31
 8007068:	bf44      	itt	mi
 800706a:	f043 0320 	orrmi.w	r3, r3, #32
 800706e:	6023      	strmi	r3, [r4, #0]
 8007070:	b91e      	cbnz	r6, 800707a <_printf_i+0x196>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	f023 0320 	bic.w	r3, r3, #32
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	2310      	movs	r3, #16
 800707c:	e7b0      	b.n	8006fe0 <_printf_i+0xfc>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	f043 0320 	orr.w	r3, r3, #32
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	2378      	movs	r3, #120	; 0x78
 8007088:	4828      	ldr	r0, [pc, #160]	; (800712c <_printf_i+0x248>)
 800708a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800708e:	e7e3      	b.n	8007058 <_printf_i+0x174>
 8007090:	0659      	lsls	r1, r3, #25
 8007092:	bf48      	it	mi
 8007094:	b2b6      	uxthmi	r6, r6
 8007096:	e7e6      	b.n	8007066 <_printf_i+0x182>
 8007098:	4615      	mov	r5, r2
 800709a:	e7bb      	b.n	8007014 <_printf_i+0x130>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	6826      	ldr	r6, [r4, #0]
 80070a0:	6961      	ldr	r1, [r4, #20]
 80070a2:	1d18      	adds	r0, r3, #4
 80070a4:	6028      	str	r0, [r5, #0]
 80070a6:	0635      	lsls	r5, r6, #24
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	d501      	bpl.n	80070b0 <_printf_i+0x1cc>
 80070ac:	6019      	str	r1, [r3, #0]
 80070ae:	e002      	b.n	80070b6 <_printf_i+0x1d2>
 80070b0:	0670      	lsls	r0, r6, #25
 80070b2:	d5fb      	bpl.n	80070ac <_printf_i+0x1c8>
 80070b4:	8019      	strh	r1, [r3, #0]
 80070b6:	2300      	movs	r3, #0
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	4615      	mov	r5, r2
 80070bc:	e7ba      	b.n	8007034 <_printf_i+0x150>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	602a      	str	r2, [r5, #0]
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	2100      	movs	r1, #0
 80070ca:	4628      	mov	r0, r5
 80070cc:	f7f9 f888 	bl	80001e0 <memchr>
 80070d0:	b108      	cbz	r0, 80070d6 <_printf_i+0x1f2>
 80070d2:	1b40      	subs	r0, r0, r5
 80070d4:	6060      	str	r0, [r4, #4]
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	2300      	movs	r3, #0
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e0:	e7a8      	b.n	8007034 <_printf_i+0x150>
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	462a      	mov	r2, r5
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d0ab      	beq.n	8007048 <_printf_i+0x164>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	d413      	bmi.n	800711e <_printf_i+0x23a>
 80070f6:	68e0      	ldr	r0, [r4, #12]
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	4298      	cmp	r0, r3
 80070fc:	bfb8      	it	lt
 80070fe:	4618      	movlt	r0, r3
 8007100:	e7a4      	b.n	800704c <_printf_i+0x168>
 8007102:	2301      	movs	r3, #1
 8007104:	4632      	mov	r2, r6
 8007106:	4649      	mov	r1, r9
 8007108:	4640      	mov	r0, r8
 800710a:	47d0      	blx	sl
 800710c:	3001      	adds	r0, #1
 800710e:	d09b      	beq.n	8007048 <_printf_i+0x164>
 8007110:	3501      	adds	r5, #1
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	9903      	ldr	r1, [sp, #12]
 8007116:	1a5b      	subs	r3, r3, r1
 8007118:	42ab      	cmp	r3, r5
 800711a:	dcf2      	bgt.n	8007102 <_printf_i+0x21e>
 800711c:	e7eb      	b.n	80070f6 <_printf_i+0x212>
 800711e:	2500      	movs	r5, #0
 8007120:	f104 0619 	add.w	r6, r4, #25
 8007124:	e7f5      	b.n	8007112 <_printf_i+0x22e>
 8007126:	bf00      	nop
 8007128:	0800788d 	.word	0x0800788d
 800712c:	0800789e 	.word	0x0800789e

08007130 <__sread>:
 8007130:	b510      	push	{r4, lr}
 8007132:	460c      	mov	r4, r1
 8007134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007138:	f000 fab2 	bl	80076a0 <_read_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	bfab      	itete	ge
 8007140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007142:	89a3      	ldrhlt	r3, [r4, #12]
 8007144:	181b      	addge	r3, r3, r0
 8007146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800714a:	bfac      	ite	ge
 800714c:	6563      	strge	r3, [r4, #84]	; 0x54
 800714e:	81a3      	strhlt	r3, [r4, #12]
 8007150:	bd10      	pop	{r4, pc}

08007152 <__swrite>:
 8007152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007156:	461f      	mov	r7, r3
 8007158:	898b      	ldrh	r3, [r1, #12]
 800715a:	05db      	lsls	r3, r3, #23
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4616      	mov	r6, r2
 8007162:	d505      	bpl.n	8007170 <__swrite+0x1e>
 8007164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007168:	2302      	movs	r3, #2
 800716a:	2200      	movs	r2, #0
 800716c:	f000 f9c8 	bl	8007500 <_lseek_r>
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	4628      	mov	r0, r5
 8007182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007186:	f000 b869 	b.w	800725c <_write_r>

0800718a <__sseek>:
 800718a:	b510      	push	{r4, lr}
 800718c:	460c      	mov	r4, r1
 800718e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007192:	f000 f9b5 	bl	8007500 <_lseek_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	bf15      	itete	ne
 800719c:	6560      	strne	r0, [r4, #84]	; 0x54
 800719e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071a6:	81a3      	strheq	r3, [r4, #12]
 80071a8:	bf18      	it	ne
 80071aa:	81a3      	strhne	r3, [r4, #12]
 80071ac:	bd10      	pop	{r4, pc}

080071ae <__sclose>:
 80071ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b2:	f000 b8d3 	b.w	800735c <_close_r>
	...

080071b8 <__swbuf_r>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	460e      	mov	r6, r1
 80071bc:	4614      	mov	r4, r2
 80071be:	4605      	mov	r5, r0
 80071c0:	b118      	cbz	r0, 80071ca <__swbuf_r+0x12>
 80071c2:	6983      	ldr	r3, [r0, #24]
 80071c4:	b90b      	cbnz	r3, 80071ca <__swbuf_r+0x12>
 80071c6:	f7ff fabd 	bl	8006744 <__sinit>
 80071ca:	4b21      	ldr	r3, [pc, #132]	; (8007250 <__swbuf_r+0x98>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	d12b      	bne.n	8007228 <__swbuf_r+0x70>
 80071d0:	686c      	ldr	r4, [r5, #4]
 80071d2:	69a3      	ldr	r3, [r4, #24]
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	071a      	lsls	r2, r3, #28
 80071da:	d52f      	bpl.n	800723c <__swbuf_r+0x84>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b36b      	cbz	r3, 800723c <__swbuf_r+0x84>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1ac0      	subs	r0, r0, r3
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	b2f6      	uxtb	r6, r6
 80071ea:	4283      	cmp	r3, r0
 80071ec:	4637      	mov	r7, r6
 80071ee:	dc04      	bgt.n	80071fa <__swbuf_r+0x42>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f948 	bl	8007488 <_fflush_r>
 80071f8:	bb30      	cbnz	r0, 8007248 <__swbuf_r+0x90>
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60a3      	str	r3, [r4, #8]
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	701e      	strb	r6, [r3, #0]
 8007208:	6963      	ldr	r3, [r4, #20]
 800720a:	3001      	adds	r0, #1
 800720c:	4283      	cmp	r3, r0
 800720e:	d004      	beq.n	800721a <__swbuf_r+0x62>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	07db      	lsls	r3, r3, #31
 8007214:	d506      	bpl.n	8007224 <__swbuf_r+0x6c>
 8007216:	2e0a      	cmp	r6, #10
 8007218:	d104      	bne.n	8007224 <__swbuf_r+0x6c>
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 f933 	bl	8007488 <_fflush_r>
 8007222:	b988      	cbnz	r0, 8007248 <__swbuf_r+0x90>
 8007224:	4638      	mov	r0, r7
 8007226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <__swbuf_r+0x9c>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d101      	bne.n	8007232 <__swbuf_r+0x7a>
 800722e:	68ac      	ldr	r4, [r5, #8]
 8007230:	e7cf      	b.n	80071d2 <__swbuf_r+0x1a>
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <__swbuf_r+0xa0>)
 8007234:	429c      	cmp	r4, r3
 8007236:	bf08      	it	eq
 8007238:	68ec      	ldreq	r4, [r5, #12]
 800723a:	e7ca      	b.n	80071d2 <__swbuf_r+0x1a>
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f81e 	bl	8007280 <__swsetup_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	d0cb      	beq.n	80071e0 <__swbuf_r+0x28>
 8007248:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800724c:	e7ea      	b.n	8007224 <__swbuf_r+0x6c>
 800724e:	bf00      	nop
 8007250:	0800783c 	.word	0x0800783c
 8007254:	0800785c 	.word	0x0800785c
 8007258:	0800781c 	.word	0x0800781c

0800725c <_write_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	; (800727c <_write_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fb f92d 	bl	80024ca <_write>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_write_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_write_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200002ac 	.word	0x200002ac

08007280 <__swsetup_r>:
 8007280:	4b32      	ldr	r3, [pc, #200]	; (800734c <__swsetup_r+0xcc>)
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	4606      	mov	r6, r0
 8007288:	460c      	mov	r4, r1
 800728a:	b125      	cbz	r5, 8007296 <__swsetup_r+0x16>
 800728c:	69ab      	ldr	r3, [r5, #24]
 800728e:	b913      	cbnz	r3, 8007296 <__swsetup_r+0x16>
 8007290:	4628      	mov	r0, r5
 8007292:	f7ff fa57 	bl	8006744 <__sinit>
 8007296:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <__swsetup_r+0xd0>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d10f      	bne.n	80072bc <__swsetup_r+0x3c>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072a4:	0719      	lsls	r1, r3, #28
 80072a6:	d42c      	bmi.n	8007302 <__swsetup_r+0x82>
 80072a8:	06dd      	lsls	r5, r3, #27
 80072aa:	d411      	bmi.n	80072d0 <__swsetup_r+0x50>
 80072ac:	2309      	movs	r3, #9
 80072ae:	6033      	str	r3, [r6, #0]
 80072b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ba:	e03e      	b.n	800733a <__swsetup_r+0xba>
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <__swsetup_r+0xd4>)
 80072be:	429c      	cmp	r4, r3
 80072c0:	d101      	bne.n	80072c6 <__swsetup_r+0x46>
 80072c2:	68ac      	ldr	r4, [r5, #8]
 80072c4:	e7eb      	b.n	800729e <__swsetup_r+0x1e>
 80072c6:	4b24      	ldr	r3, [pc, #144]	; (8007358 <__swsetup_r+0xd8>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	bf08      	it	eq
 80072cc:	68ec      	ldreq	r4, [r5, #12]
 80072ce:	e7e6      	b.n	800729e <__swsetup_r+0x1e>
 80072d0:	0758      	lsls	r0, r3, #29
 80072d2:	d512      	bpl.n	80072fa <__swsetup_r+0x7a>
 80072d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072d6:	b141      	cbz	r1, 80072ea <__swsetup_r+0x6a>
 80072d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <__swsetup_r+0x66>
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff f86b 	bl	80063bc <_free_r>
 80072e6:	2300      	movs	r3, #0
 80072e8:	6363      	str	r3, [r4, #52]	; 0x34
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	2300      	movs	r3, #0
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f043 0308 	orr.w	r3, r3, #8
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	b94b      	cbnz	r3, 800731a <__swsetup_r+0x9a>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800730c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007310:	d003      	beq.n	800731a <__swsetup_r+0x9a>
 8007312:	4621      	mov	r1, r4
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f92b 	bl	8007570 <__smakebuf_r>
 800731a:	89a0      	ldrh	r0, [r4, #12]
 800731c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007320:	f010 0301 	ands.w	r3, r0, #1
 8007324:	d00a      	beq.n	800733c <__swsetup_r+0xbc>
 8007326:	2300      	movs	r3, #0
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	6963      	ldr	r3, [r4, #20]
 800732c:	425b      	negs	r3, r3
 800732e:	61a3      	str	r3, [r4, #24]
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b943      	cbnz	r3, 8007346 <__swsetup_r+0xc6>
 8007334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007338:	d1ba      	bne.n	80072b0 <__swsetup_r+0x30>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	0781      	lsls	r1, r0, #30
 800733e:	bf58      	it	pl
 8007340:	6963      	ldrpl	r3, [r4, #20]
 8007342:	60a3      	str	r3, [r4, #8]
 8007344:	e7f4      	b.n	8007330 <__swsetup_r+0xb0>
 8007346:	2000      	movs	r0, #0
 8007348:	e7f7      	b.n	800733a <__swsetup_r+0xba>
 800734a:	bf00      	nop
 800734c:	20000010 	.word	0x20000010
 8007350:	0800783c 	.word	0x0800783c
 8007354:	0800785c 	.word	0x0800785c
 8007358:	0800781c 	.word	0x0800781c

0800735c <_close_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d06      	ldr	r5, [pc, #24]	; (8007378 <_close_r+0x1c>)
 8007360:	2300      	movs	r3, #0
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	f7fb f8cb 	bl	8002502 <_close>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_close_r+0x1a>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_close_r+0x1a>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	200002ac 	.word	0x200002ac

0800737c <__sflush_r>:
 800737c:	898a      	ldrh	r2, [r1, #12]
 800737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	4605      	mov	r5, r0
 8007384:	0710      	lsls	r0, r2, #28
 8007386:	460c      	mov	r4, r1
 8007388:	d458      	bmi.n	800743c <__sflush_r+0xc0>
 800738a:	684b      	ldr	r3, [r1, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	dc05      	bgt.n	800739c <__sflush_r+0x20>
 8007390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	dc02      	bgt.n	800739c <__sflush_r+0x20>
 8007396:	2000      	movs	r0, #0
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800739e:	2e00      	cmp	r6, #0
 80073a0:	d0f9      	beq.n	8007396 <__sflush_r+0x1a>
 80073a2:	2300      	movs	r3, #0
 80073a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073a8:	682f      	ldr	r7, [r5, #0]
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	d032      	beq.n	8007414 <__sflush_r+0x98>
 80073ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	075a      	lsls	r2, r3, #29
 80073b4:	d505      	bpl.n	80073c2 <__sflush_r+0x46>
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	1ac0      	subs	r0, r0, r3
 80073ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073bc:	b10b      	cbz	r3, 80073c2 <__sflush_r+0x46>
 80073be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c0:	1ac0      	subs	r0, r0, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	4602      	mov	r2, r0
 80073c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b0      	blx	r6
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	d106      	bne.n	80073e2 <__sflush_r+0x66>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	291d      	cmp	r1, #29
 80073d8:	d82c      	bhi.n	8007434 <__sflush_r+0xb8>
 80073da:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <__sflush_r+0x108>)
 80073dc:	40ca      	lsrs	r2, r1
 80073de:	07d6      	lsls	r6, r2, #31
 80073e0:	d528      	bpl.n	8007434 <__sflush_r+0xb8>
 80073e2:	2200      	movs	r2, #0
 80073e4:	6062      	str	r2, [r4, #4]
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	d504      	bpl.n	80073f8 <__sflush_r+0x7c>
 80073ee:	1c42      	adds	r2, r0, #1
 80073f0:	d101      	bne.n	80073f6 <__sflush_r+0x7a>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	b903      	cbnz	r3, 80073f8 <__sflush_r+0x7c>
 80073f6:	6560      	str	r0, [r4, #84]	; 0x54
 80073f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073fa:	602f      	str	r7, [r5, #0]
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d0ca      	beq.n	8007396 <__sflush_r+0x1a>
 8007400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007404:	4299      	cmp	r1, r3
 8007406:	d002      	beq.n	800740e <__sflush_r+0x92>
 8007408:	4628      	mov	r0, r5
 800740a:	f7fe ffd7 	bl	80063bc <_free_r>
 800740e:	2000      	movs	r0, #0
 8007410:	6360      	str	r0, [r4, #52]	; 0x34
 8007412:	e7c1      	b.n	8007398 <__sflush_r+0x1c>
 8007414:	6a21      	ldr	r1, [r4, #32]
 8007416:	2301      	movs	r3, #1
 8007418:	4628      	mov	r0, r5
 800741a:	47b0      	blx	r6
 800741c:	1c41      	adds	r1, r0, #1
 800741e:	d1c7      	bne.n	80073b0 <__sflush_r+0x34>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0c4      	beq.n	80073b0 <__sflush_r+0x34>
 8007426:	2b1d      	cmp	r3, #29
 8007428:	d001      	beq.n	800742e <__sflush_r+0xb2>
 800742a:	2b16      	cmp	r3, #22
 800742c:	d101      	bne.n	8007432 <__sflush_r+0xb6>
 800742e:	602f      	str	r7, [r5, #0]
 8007430:	e7b1      	b.n	8007396 <__sflush_r+0x1a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	e7ad      	b.n	8007398 <__sflush_r+0x1c>
 800743c:	690f      	ldr	r7, [r1, #16]
 800743e:	2f00      	cmp	r7, #0
 8007440:	d0a9      	beq.n	8007396 <__sflush_r+0x1a>
 8007442:	0793      	lsls	r3, r2, #30
 8007444:	680e      	ldr	r6, [r1, #0]
 8007446:	bf08      	it	eq
 8007448:	694b      	ldreq	r3, [r1, #20]
 800744a:	600f      	str	r7, [r1, #0]
 800744c:	bf18      	it	ne
 800744e:	2300      	movne	r3, #0
 8007450:	eba6 0807 	sub.w	r8, r6, r7
 8007454:	608b      	str	r3, [r1, #8]
 8007456:	f1b8 0f00 	cmp.w	r8, #0
 800745a:	dd9c      	ble.n	8007396 <__sflush_r+0x1a>
 800745c:	6a21      	ldr	r1, [r4, #32]
 800745e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007460:	4643      	mov	r3, r8
 8007462:	463a      	mov	r2, r7
 8007464:	4628      	mov	r0, r5
 8007466:	47b0      	blx	r6
 8007468:	2800      	cmp	r0, #0
 800746a:	dc06      	bgt.n	800747a <__sflush_r+0xfe>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007478:	e78e      	b.n	8007398 <__sflush_r+0x1c>
 800747a:	4407      	add	r7, r0
 800747c:	eba8 0800 	sub.w	r8, r8, r0
 8007480:	e7e9      	b.n	8007456 <__sflush_r+0xda>
 8007482:	bf00      	nop
 8007484:	20400001 	.word	0x20400001

08007488 <_fflush_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	690b      	ldr	r3, [r1, #16]
 800748c:	4605      	mov	r5, r0
 800748e:	460c      	mov	r4, r1
 8007490:	b913      	cbnz	r3, 8007498 <_fflush_r+0x10>
 8007492:	2500      	movs	r5, #0
 8007494:	4628      	mov	r0, r5
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	b118      	cbz	r0, 80074a2 <_fflush_r+0x1a>
 800749a:	6983      	ldr	r3, [r0, #24]
 800749c:	b90b      	cbnz	r3, 80074a2 <_fflush_r+0x1a>
 800749e:	f7ff f951 	bl	8006744 <__sinit>
 80074a2:	4b14      	ldr	r3, [pc, #80]	; (80074f4 <_fflush_r+0x6c>)
 80074a4:	429c      	cmp	r4, r3
 80074a6:	d11b      	bne.n	80074e0 <_fflush_r+0x58>
 80074a8:	686c      	ldr	r4, [r5, #4]
 80074aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0ef      	beq.n	8007492 <_fflush_r+0xa>
 80074b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074b4:	07d0      	lsls	r0, r2, #31
 80074b6:	d404      	bmi.n	80074c2 <_fflush_r+0x3a>
 80074b8:	0599      	lsls	r1, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_fflush_r+0x3a>
 80074bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074be:	f7ff f9df 	bl	8006880 <__retarget_lock_acquire_recursive>
 80074c2:	4628      	mov	r0, r5
 80074c4:	4621      	mov	r1, r4
 80074c6:	f7ff ff59 	bl	800737c <__sflush_r>
 80074ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074cc:	07da      	lsls	r2, r3, #31
 80074ce:	4605      	mov	r5, r0
 80074d0:	d4e0      	bmi.n	8007494 <_fflush_r+0xc>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	059b      	lsls	r3, r3, #22
 80074d6:	d4dd      	bmi.n	8007494 <_fflush_r+0xc>
 80074d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074da:	f7ff f9d2 	bl	8006882 <__retarget_lock_release_recursive>
 80074de:	e7d9      	b.n	8007494 <_fflush_r+0xc>
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <_fflush_r+0x70>)
 80074e2:	429c      	cmp	r4, r3
 80074e4:	d101      	bne.n	80074ea <_fflush_r+0x62>
 80074e6:	68ac      	ldr	r4, [r5, #8]
 80074e8:	e7df      	b.n	80074aa <_fflush_r+0x22>
 80074ea:	4b04      	ldr	r3, [pc, #16]	; (80074fc <_fflush_r+0x74>)
 80074ec:	429c      	cmp	r4, r3
 80074ee:	bf08      	it	eq
 80074f0:	68ec      	ldreq	r4, [r5, #12]
 80074f2:	e7da      	b.n	80074aa <_fflush_r+0x22>
 80074f4:	0800783c 	.word	0x0800783c
 80074f8:	0800785c 	.word	0x0800785c
 80074fc:	0800781c 	.word	0x0800781c

08007500 <_lseek_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	; (8007520 <_lseek_r+0x20>)
 8007504:	4604      	mov	r4, r0
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	2200      	movs	r2, #0
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f7fb f81e 	bl	8002550 <_lseek>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_lseek_r+0x1e>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_lseek_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	200002ac 	.word	0x200002ac

08007524 <__swhatbuf_r>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	460e      	mov	r6, r1
 8007528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752c:	2900      	cmp	r1, #0
 800752e:	b096      	sub	sp, #88	; 0x58
 8007530:	4614      	mov	r4, r2
 8007532:	461d      	mov	r5, r3
 8007534:	da08      	bge.n	8007548 <__swhatbuf_r+0x24>
 8007536:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	061a      	lsls	r2, r3, #24
 8007540:	d410      	bmi.n	8007564 <__swhatbuf_r+0x40>
 8007542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007546:	e00e      	b.n	8007566 <__swhatbuf_r+0x42>
 8007548:	466a      	mov	r2, sp
 800754a:	f000 f8bb 	bl	80076c4 <_fstat_r>
 800754e:	2800      	cmp	r0, #0
 8007550:	dbf1      	blt.n	8007536 <__swhatbuf_r+0x12>
 8007552:	9a01      	ldr	r2, [sp, #4]
 8007554:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007558:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800755c:	425a      	negs	r2, r3
 800755e:	415a      	adcs	r2, r3
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	e7ee      	b.n	8007542 <__swhatbuf_r+0x1e>
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	2000      	movs	r0, #0
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	b016      	add	sp, #88	; 0x58
 800756c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007570 <__smakebuf_r>:
 8007570:	898b      	ldrh	r3, [r1, #12]
 8007572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007574:	079d      	lsls	r5, r3, #30
 8007576:	4606      	mov	r6, r0
 8007578:	460c      	mov	r4, r1
 800757a:	d507      	bpl.n	800758c <__smakebuf_r+0x1c>
 800757c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	2301      	movs	r3, #1
 8007586:	6163      	str	r3, [r4, #20]
 8007588:	b002      	add	sp, #8
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	ab01      	add	r3, sp, #4
 800758e:	466a      	mov	r2, sp
 8007590:	f7ff ffc8 	bl	8007524 <__swhatbuf_r>
 8007594:	9900      	ldr	r1, [sp, #0]
 8007596:	4605      	mov	r5, r0
 8007598:	4630      	mov	r0, r6
 800759a:	f7fe ff7b 	bl	8006494 <_malloc_r>
 800759e:	b948      	cbnz	r0, 80075b4 <__smakebuf_r+0x44>
 80075a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a4:	059a      	lsls	r2, r3, #22
 80075a6:	d4ef      	bmi.n	8007588 <__smakebuf_r+0x18>
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	f043 0302 	orr.w	r3, r3, #2
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	e7e3      	b.n	800757c <__smakebuf_r+0xc>
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <__smakebuf_r+0x7c>)
 80075b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	6020      	str	r0, [r4, #0]
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	9b00      	ldr	r3, [sp, #0]
 80075c4:	6163      	str	r3, [r4, #20]
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	6120      	str	r0, [r4, #16]
 80075ca:	b15b      	cbz	r3, 80075e4 <__smakebuf_r+0x74>
 80075cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 f889 	bl	80076e8 <_isatty_r>
 80075d6:	b128      	cbz	r0, 80075e4 <__smakebuf_r+0x74>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	89a0      	ldrh	r0, [r4, #12]
 80075e6:	4305      	orrs	r5, r0
 80075e8:	81a5      	strh	r5, [r4, #12]
 80075ea:	e7cd      	b.n	8007588 <__smakebuf_r+0x18>
 80075ec:	080066dd 	.word	0x080066dd

080075f0 <memcpy>:
 80075f0:	440a      	add	r2, r1
 80075f2:	4291      	cmp	r1, r2
 80075f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075f8:	d100      	bne.n	80075fc <memcpy+0xc>
 80075fa:	4770      	bx	lr
 80075fc:	b510      	push	{r4, lr}
 80075fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007606:	4291      	cmp	r1, r2
 8007608:	d1f9      	bne.n	80075fe <memcpy+0xe>
 800760a:	bd10      	pop	{r4, pc}

0800760c <memmove>:
 800760c:	4288      	cmp	r0, r1
 800760e:	b510      	push	{r4, lr}
 8007610:	eb01 0402 	add.w	r4, r1, r2
 8007614:	d902      	bls.n	800761c <memmove+0x10>
 8007616:	4284      	cmp	r4, r0
 8007618:	4623      	mov	r3, r4
 800761a:	d807      	bhi.n	800762c <memmove+0x20>
 800761c:	1e43      	subs	r3, r0, #1
 800761e:	42a1      	cmp	r1, r4
 8007620:	d008      	beq.n	8007634 <memmove+0x28>
 8007622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800762a:	e7f8      	b.n	800761e <memmove+0x12>
 800762c:	4402      	add	r2, r0
 800762e:	4601      	mov	r1, r0
 8007630:	428a      	cmp	r2, r1
 8007632:	d100      	bne.n	8007636 <memmove+0x2a>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800763a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800763e:	e7f7      	b.n	8007630 <memmove+0x24>

08007640 <_realloc_r>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	4680      	mov	r8, r0
 8007646:	4614      	mov	r4, r2
 8007648:	460e      	mov	r6, r1
 800764a:	b921      	cbnz	r1, 8007656 <_realloc_r+0x16>
 800764c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007650:	4611      	mov	r1, r2
 8007652:	f7fe bf1f 	b.w	8006494 <_malloc_r>
 8007656:	b92a      	cbnz	r2, 8007664 <_realloc_r+0x24>
 8007658:	f7fe feb0 	bl	80063bc <_free_r>
 800765c:	4625      	mov	r5, r4
 800765e:	4628      	mov	r0, r5
 8007660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007664:	f000 f850 	bl	8007708 <_malloc_usable_size_r>
 8007668:	4284      	cmp	r4, r0
 800766a:	4607      	mov	r7, r0
 800766c:	d802      	bhi.n	8007674 <_realloc_r+0x34>
 800766e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007672:	d812      	bhi.n	800769a <_realloc_r+0x5a>
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7fe ff0c 	bl	8006494 <_malloc_r>
 800767c:	4605      	mov	r5, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d0ed      	beq.n	800765e <_realloc_r+0x1e>
 8007682:	42bc      	cmp	r4, r7
 8007684:	4622      	mov	r2, r4
 8007686:	4631      	mov	r1, r6
 8007688:	bf28      	it	cs
 800768a:	463a      	movcs	r2, r7
 800768c:	f7ff ffb0 	bl	80075f0 <memcpy>
 8007690:	4631      	mov	r1, r6
 8007692:	4640      	mov	r0, r8
 8007694:	f7fe fe92 	bl	80063bc <_free_r>
 8007698:	e7e1      	b.n	800765e <_realloc_r+0x1e>
 800769a:	4635      	mov	r5, r6
 800769c:	e7df      	b.n	800765e <_realloc_r+0x1e>
	...

080076a0 <_read_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d07      	ldr	r5, [pc, #28]	; (80076c0 <_read_r+0x20>)
 80076a4:	4604      	mov	r4, r0
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	602a      	str	r2, [r5, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7fa feee 	bl	8002490 <_read>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_read_r+0x1e>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_read_r+0x1e>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	200002ac 	.word	0x200002ac

080076c4 <_fstat_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4d07      	ldr	r5, [pc, #28]	; (80076e4 <_fstat_r+0x20>)
 80076c8:	2300      	movs	r3, #0
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	f7fa ff22 	bl	800251a <_fstat>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d102      	bne.n	80076e0 <_fstat_r+0x1c>
 80076da:	682b      	ldr	r3, [r5, #0]
 80076dc:	b103      	cbz	r3, 80076e0 <_fstat_r+0x1c>
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	bd38      	pop	{r3, r4, r5, pc}
 80076e2:	bf00      	nop
 80076e4:	200002ac 	.word	0x200002ac

080076e8 <_isatty_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d06      	ldr	r5, [pc, #24]	; (8007704 <_isatty_r+0x1c>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	f7fa ff21 	bl	800253a <_isatty>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_isatty_r+0x1a>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_isatty_r+0x1a>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	200002ac 	.word	0x200002ac

08007708 <_malloc_usable_size_r>:
 8007708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770c:	1f18      	subs	r0, r3, #4
 800770e:	2b00      	cmp	r3, #0
 8007710:	bfbc      	itt	lt
 8007712:	580b      	ldrlt	r3, [r1, r0]
 8007714:	18c0      	addlt	r0, r0, r3
 8007716:	4770      	bx	lr

08007718 <_init>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr

08007724 <_fini>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr
